[1,["eaVyJnfOVPsrQ3m3l0NzqI@d0bad","eaVyJnfOVPsrQ3m3l0NzqI@eb296","eaVyJnfOVPsrQ3m3l0NzqI@ce771","1brw/JvvpFnIvdrxpFCgMZ","eaVyJnfOVPsrQ3m3l0NzqI@8d883","eaVyJnfOVPsrQ3m3l0NzqI@f3d6d","eaVyJnfOVPsrQ3m3l0NzqI@970ff","d7p3qqdp9IvIFfCkoE2qpJ@19377","eaVyJnfOVPsrQ3m3l0NzqI@e8fa1","eaVyJnfOVPsrQ3m3l0NzqI@b5779","eaVyJnfOVPsrQ3m3l0NzqI@4dbc5","eaVyJnfOVPsrQ3m3l0NzqI@9c518","eaVyJnfOVPsrQ3m3l0NzqI@df364","eaVyJnfOVPsrQ3m3l0NzqI@177bf","eaVyJnfOVPsrQ3m3l0NzqI@5aafe","eaVyJnfOVPsrQ3m3l0NzqI@f4796","eaVyJnfOVPsrQ3m3l0NzqI@b4ffc","eaVyJnfOVPsrQ3m3l0NzqI@b9bdf","eaVyJnfOVPsrQ3m3l0NzqI@b0c73","eaVyJnfOVPsrQ3m3l0NzqI@13c49","eaVyJnfOVPsrQ3m3l0NzqI@fd54c","eaVyJnfOVPsrQ3m3l0NzqI@007b9","eaVyJnfOVPsrQ3m3l0NzqI@0b6d4","eaVyJnfOVPsrQ3m3l0NzqI@1bc01","eaVyJnfOVPsrQ3m3l0NzqI@6be89","eaVyJnfOVPsrQ3m3l0NzqI@f7bc4","eaVyJnfOVPsrQ3m3l0NzqI@7f42f","eaVyJnfOVPsrQ3m3l0NzqI@4df41","eaVyJnfOVPsrQ3m3l0NzqI@382b0","eaVyJnfOVPsrQ3m3l0NzqI@20ed2","eaVyJnfOVPsrQ3m3l0NzqI@37aa5","eaVyJnfOVPsrQ3m3l0NzqI@69469","eaVyJnfOVPsrQ3m3l0NzqI@dd377","eaVyJnfOVPsrQ3m3l0NzqI@04594","eaVyJnfOVPsrQ3m3l0NzqI@ffd16","eaVyJnfOVPsrQ3m3l0NzqI@9739e","eaVyJnfOVPsrQ3m3l0NzqI@6041c","eaVyJnfOVPsrQ3m3l0NzqI@652f0","eaVyJnfOVPsrQ3m3l0NzqI@e92ee","eaVyJnfOVPsrQ3m3l0NzqI@bcf11","eaVyJnfOVPsrQ3m3l0NzqI@8c65c","eaVyJnfOVPsrQ3m3l0NzqI@787f1","eaVyJnfOVPsrQ3m3l0NzqI@458a4","eaVyJnfOVPsrQ3m3l0NzqI@bef91","eaVyJnfOVPsrQ3m3l0NzqI@e72c1","eaVyJnfOVPsrQ3m3l0NzqI@56fcc","eaVyJnfOVPsrQ3m3l0NzqI@77c5a","eaVyJnfOVPsrQ3m3l0NzqI@94fc5","eaVyJnfOVPsrQ3m3l0NzqI@d5957","eaVyJnfOVPsrQ3m3l0NzqI@325b5","eaVyJnfOVPsrQ3m3l0NzqI@ae2c8","eaVyJnfOVPsrQ3m3l0NzqI@ae3a0","eaVyJnfOVPsrQ3m3l0NzqI@7e391","eaVyJnfOVPsrQ3m3l0NzqI@b5009","eaVyJnfOVPsrQ3m3l0NzqI@96201","eaVyJnfOVPsrQ3m3l0NzqI@0c28e","eaVyJnfOVPsrQ3m3l0NzqI@e175e","eaVyJnfOVPsrQ3m3l0NzqI@64f1a","eaVyJnfOVPsrQ3m3l0NzqI@57794","eaVyJnfOVPsrQ3m3l0NzqI@d1393","eaVyJnfOVPsrQ3m3l0NzqI@82e3f","eaVyJnfOVPsrQ3m3l0NzqI@934c1","eaVyJnfOVPsrQ3m3l0NzqI@9ed80","eaVyJnfOVPsrQ3m3l0NzqI@f61f1","eaVyJnfOVPsrQ3m3l0NzqI@3aac3","eaVyJnfOVPsrQ3m3l0NzqI@4f3c3","eaVyJnfOVPsrQ3m3l0NzqI@76456","eaVyJnfOVPsrQ3m3l0NzqI@00288","eaVyJnfOVPsrQ3m3l0NzqI@98482","eaVyJnfOVPsrQ3m3l0NzqI@3e428","eaVyJnfOVPsrQ3m3l0NzqI@f4a71","eaVyJnfOVPsrQ3m3l0NzqI@8b260","eaVyJnfOVPsrQ3m3l0NzqI@38c64","eaVyJnfOVPsrQ3m3l0NzqI@d9514","eaVyJnfOVPsrQ3m3l0NzqI@a778b","eaVyJnfOVPsrQ3m3l0NzqI@ee296","eaVyJnfOVPsrQ3m3l0NzqI@b6225","eaVyJnfOVPsrQ3m3l0NzqI@16808","eaVyJnfOVPsrQ3m3l0NzqI@535d4","eaVyJnfOVPsrQ3m3l0NzqI@10120","eaVyJnfOVPsrQ3m3l0NzqI@9c173","eaVyJnfOVPsrQ3m3l0NzqI@63f9d","eaVyJnfOVPsrQ3m3l0NzqI@b9096","eaVyJnfOVPsrQ3m3l0NzqI@62e8e","eaVyJnfOVPsrQ3m3l0NzqI@adb9f","eaVyJnfOVPsrQ3m3l0NzqI@5414b","eaVyJnfOVPsrQ3m3l0NzqI@1c87f","eaVyJnfOVPsrQ3m3l0NzqI@66084","eaVyJnfOVPsrQ3m3l0NzqI@e3ebf","eaVyJnfOVPsrQ3m3l0NzqI@8b674","eaVyJnfOVPsrQ3m3l0NzqI@d49d0","eaVyJnfOVPsrQ3m3l0NzqI@b5c0a","eaVyJnfOVPsrQ3m3l0NzqI@a9763","eaVyJnfOVPsrQ3m3l0NzqI@d6c98","eaVyJnfOVPsrQ3m3l0NzqI@222d9","eaVyJnfOVPsrQ3m3l0NzqI@8130b","eaVyJnfOVPsrQ3m3l0NzqI@4d977","eaVyJnfOVPsrQ3m3l0NzqI@985a3","eaVyJnfOVPsrQ3m3l0NzqI@79612","eaVyJnfOVPsrQ3m3l0NzqI@aba77","eaVyJnfOVPsrQ3m3l0NzqI@23e69","eaVyJnfOVPsrQ3m3l0NzqI@cc861","eaVyJnfOVPsrQ3m3l0NzqI@a5fe8","eaVyJnfOVPsrQ3m3l0NzqI@7fbdd","eaVyJnfOVPsrQ3m3l0NzqI@3c58b","eaVyJnfOVPsrQ3m3l0NzqI@ae0d3","eaVyJnfOVPsrQ3m3l0NzqI@b400a","eaVyJnfOVPsrQ3m3l0NzqI@dba84","eaVyJnfOVPsrQ3m3l0NzqI@cf469","eaVyJnfOVPsrQ3m3l0NzqI@8c387","eaVyJnfOVPsrQ3m3l0NzqI@55b5a","eaVyJnfOVPsrQ3m3l0NzqI@7e14e","eaVyJnfOVPsrQ3m3l0NzqI@bc3c1","eaVyJnfOVPsrQ3m3l0NzqI@f3944","eaVyJnfOVPsrQ3m3l0NzqI@72a49","eaVyJnfOVPsrQ3m3l0NzqI@a0fa6","eaVyJnfOVPsrQ3m3l0NzqI@fb490","eaVyJnfOVPsrQ3m3l0NzqI@4fa1b","eaVyJnfOVPsrQ3m3l0NzqI@f316f","eaVyJnfOVPsrQ3m3l0NzqI@c3fb2","eaVyJnfOVPsrQ3m3l0NzqI@d3e7b","eaVyJnfOVPsrQ3m3l0NzqI@ff8e9","eaVyJnfOVPsrQ3m3l0NzqI@e08bd","fd0PZ/yZNOrqRIWOvL3MYE","d7p3qqdp9IvIFfCkoE2qpJ@2e5b8","d7p3qqdp9IvIFfCkoE2qpJ@9f3e5","d7p3qqdp9IvIFfCkoE2qpJ@5eca5","d7p3qqdp9IvIFfCkoE2qpJ@ed28b","d7p3qqdp9IvIFfCkoE2qpJ@62bc8","d7p3qqdp9IvIFfCkoE2qpJ@438fe","d7p3qqdp9IvIFfCkoE2qpJ@728de","d7p3qqdp9IvIFfCkoE2qpJ@c989d","d7p3qqdp9IvIFfCkoE2qpJ@590e8","d7p3qqdp9IvIFfCkoE2qpJ@9a9bb"],["node","_mesh","_parent","_effectAsset","mainTexture","root","_cameraComponent","scene","asset","_envmap","data","_skeleton"],[["cc.Node",["_name","_id","_layer","_parent","_lpos","_prefab","_children","_components","_lrot","_euler","_lscale"],0,1,5,4,2,9,5,5,5],"cc.ImageAsset",["cc.Node",["_name","_children","_prefab","_parent","_lpos","_lrot","_euler","_components"],2,12,4,1,5,5,5,2],["cc.Node",["_name","_parent","_children","_prefab","_lpos","_lrot","_euler"],2,1,9,4,5,5,5],["cc.Widget",["_alignFlags","_bottom","node","__prefab"],1,1,4],["cc.Camera",["_clearFlags","_visibility","_projection","_priority","_orthoHeight","_far","node","_color"],-3,1,5],"cc.TextureCube",["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.SceneAsset",["_name"],2],["cc.Scene",["_children","_globals"],3,2,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog"],3,4,4,4,4],["cc.AmbientInfo",[],3],["cc.ShadowsInfo",["_shadowColor"],3,5],["cc.SkyboxInfo",["_enabled","_envmap"],2,6],["cc.FogInfo",["_enabled"],2],["cc.UITransform",["node","__prefab","_contentSize"],3,1,4,5],["cc.CompPrefabInfo",["fileId"],2],["cc.Canvas",["node","__prefab","_cameraComponent"],3,1,4,1],["cc.TargetInfo",["localID"],2],["cc.Label",["_string","_actualFontSize","_fontSize","_lineHeight","node","__prefab","_color"],-1,1,4,5],["cc.DirectionalLight",["node","_staticSettings"],3,1,4],["cc.StaticLightSettings",[],3],["cc.PrefabInfo",["fileId","root","instance","asset"],2,1,4,6],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.PrefabInstance",["fileId","propertyOverrides"],2,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["cc.MeshRenderer",["node","__prefab","_materials","lightmapSettings","_mesh"],3,1,4,3,4,6],["cc.ModelLightmapSettings",[],3],["cc.Prefab",[],3],["cc.SkeletalAnimation",["node","__prefab"],3,1,4],["cc.SkinnedMeshRenderer",["node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],3,1,4,3,4,1,6,6],["cc.Material",["_name","_states","_defines","_props"],0,12],["cc.Material",["_name","_props","_states","_defines"],-1],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.Mesh",["_native","_dataLength","_hash","_struct"],0,11]],[[16,0,2],[28,1],[35,0,1,2,3,4],[0,0,3,7,4,10,2],[27,0,1,2,3,4,1],[23,0,1,2,2],[0,0,3,5,4,2],[0,0,3,6,5,4,8,9,2],[32,0,1,2,3,4],[3,0,1,2,3,4,2],[0,0,3,6,5,4,2],[3,0,1,2,3,4,5,6,2],[26,0,1,2,2],[0,0,3,5,2],[0,0,6,5,4,8,9,2],[0,0,3,6,5,2],[2,0,1,2,4,5,6,2],[15,0,1,2,1],[7,0,1,2,4],[8,0,2],[0,0,1,6,4,8,9,3],[0,0,2,1,3,6,7,4,4],[0,0,2,3,7,4,3],[0,0,1,3,7,8,9,3],[0,0,1,3,7,4,8,9,3],[0,1,3,5,2],[0,0,6,7,5,2],[0,0,3,7,5,8,9,2],[2,0,3,7,4,2],[2,0,1,2,5,6,2],[2,0,3,1,2,2],[2,0,3,1,2,4,5,6,2],[3,0,1,2,3,2],[9,0,1,1],[10,0,1,2,3,1],[11,1],[12,0,1],[13,0,1,2],[14,0,2],[17,0,1,2,1],[4,0,2,3,2],[4,0,1,2,3],[18,0,2],[19,0,1,2,3,4,5,6,5],[20,0,1,1],[21,1],[5,0,1,6,3],[5,2,3,4,5,0,1,6,7,7],[22,0,1,2,3,2],[24,0,1,2],[25,0,1,2,3],[29,1],[30,0,1,1],[31,0,1,2,3,4,5,6,1],[33,0,1,2,3,5],[34,0,1,2,3,4]],[[[[18,"builtin-standard",[{"hash":2668109714,"name":"builtin-standard|standard-vs:vert|standard-fs:frag","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int16: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n        return gl_VertexIndex;\n    }\nlayout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n            ivec2 texSize = textureSize(tex, 0);\n            return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture(tex, x)),\n            decode32(texture(tex, y)),\n            decode32(texture(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  layout(location = 4) in u16vec4 a_joints;\nlayout(location = 5) in vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    layout(location = 7) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(set = 2, binding = 3) uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n  #else\n  layout(set = 2, binding = 3) uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n    vec4 wPos = pos;\n    float cam_dis = distance(cc_cameraPos, wPos);\n    float fogStart = cc_fogBase.x;\n    float fogEnd = cc_fogBase.y;\n    return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n    float f = exp(-cam_dis * fogDensity);\n    return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n    float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n    return f;\n}\nfloat LayeredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float _FogTop = cc_fogAdd.x;\n    float _FogRange = cc_fogAdd.y;\n    vec3 camWorldProj = cc_cameraPos.xyz;\n    camWorldProj.y = 0.;\n    vec3 worldPosProj = wPos.xyz;\n    worldPosProj.y = 0.;\n    float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n    float fDeltaY, fDensityIntegral;\n    if (cc_cameraPos.y > _FogTop) {\n        if (wPos.y < _FogTop) {\n            fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n            fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n        } else {\n            fDeltaY = 0.;\n            fDensityIntegral = 0.;\n        }\n    } else {\n        if (wPos.y < _FogTop) {\n            float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n            float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n            fDeltaY = abs(fDeltaA - fDeltaB);\n            fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n        } else {\n            fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n            fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n        }\n    }\n    float fDensity;\n    if (fDeltaY != 0.) {\n        fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n    } else {\n        fDensity = 0.;\n    }\n    float f = exp(-fDensity);\n    return f;\n}\nfloat CC_TRANSFER_FOG(vec4 pos) {\n    #if CC_USE_FOG == 0\n        return LinearFog(pos);\n\t#elif CC_USE_FOG == 1\n        return ExpFog(pos);\n    #elif CC_USE_FOG == 2\n        return ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n        return LayeredFog(pos);\n    #endif\n    return 1.;\n}\nlayout(location = 0) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowColor;\n  lowp  vec4 cc_shadowInfo;\n};\n#if USE_VERTEX_COLOR\n  layout(location = 13) in vec4 a_color;\n  layout(location = 1) out vec4 v_color;\n#endif\nlayout(location = 2) out vec3 v_position;\nlayout(location = 3) out vec3 v_normal;\nlayout(location = 4) out vec2 v_uv;\nlayout(location = 5) out vec2 v_uv1;\nlayout(location = 6) out float v_fog_factor;\n#if USE_NORMAL_MAP\n  layout(location = 7) out vec3 v_tangent;\n  layout(location = 8) out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec2 v_luv;\nvoid CCLightingMapCaclUV()\n{\n#if !USE_INSTANCING\n      v_luv = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n#else\n      v_luv = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n#endif\n}\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_fog_factor = CC_TRANSFER_FOG(pos);\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n    v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowColor;\n  lowp  vec4 cc_shadowInfo;\n};\n#if CC_USE_IBL\nlayout(set = 0, binding = 4) uniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\n#endif\n#if CC_RECEIVE_SHADOW\nlayout(location = 0) in highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n  float CCGetShadowFactorX1 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    float shadow = step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow;\n  }\n  float CCGetShadowFactorX5 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow / 5.0;\n  }\n  float CCGetShadowFactorX9 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -1; i <= 1; i++) {\n      for (int j = -1; j <= 1; j++) {\n        float closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 9.0;\n  }\n  float CCGetShadowFactorX25 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -2; i <= 2; i++) {\n      for (int j = -2; j <= 2; j++) {\n        float closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 25.0;\n  }\n  float CCGetDirLightShadowFactorX1 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    float shadow = step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow;\n  }\n  float CCGetDirLightShadowFactorX5 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    return shadow / 5.0;\n  }\n  float CCGetDirLightShadowFactorX9 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -1; i <= 1; i++) {\n      for (int j = -1; j <= 1; j++) {\n        float closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 9.0;\n  }\n  float CCGetDirLightShadowFactorX25 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -2; i <= 2; i++) {\n      for (int j = -2; j <= 2; j++) {\n        float closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 25.0;\n  }\n#endif\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness*0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n  vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec4 lightmap;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\n#if CC_FORWARD_ADD\nlayout(set = 2, binding = 1) uniform CCForwardLight {\n  highp vec4 cc_lightPos[1];\n  vec4 cc_lightColor[1];\n  vec4 cc_lightSizeRangeAngle[1];\n  vec4 cc_lightDir[1];\n};\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\n  vec4 CCStandardShading (StandardSurface s) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < 1; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n    #if CC_RECEIVE_SHADOW\n      if (cc_lightPos[i].w > 0.0) {\n    {\n      float pcf = cc_shadowInfo.z + 0.001;\n      float shadowAttenuation = 0.0;\n      if (pcf > 3.0) shadowAttenuation = CCGetDirLightShadowFactorX25();\n      else if (3.0 > pcf && pcf > 2.0) shadowAttenuation = CCGetDirLightShadowFactorX9();\n      else if (2.0 > pcf && pcf > 1.0) shadowAttenuation = CCGetDirLightShadowFactorX5();\n      else shadowAttenuation = CCGetDirLightShadowFactorX1();\n      lightColor *= 1.0 - shadowAttenuation;\n    }\n      }\n    #endif\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    finalColor = finalColor * s.occlusion;\n    return vec4(finalColor, 0.0);\n  }\n#else\n  vec4 CCStandardShading (StandardSurface s) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    vec3 H = normalize(L+V);\n    float NH = max(dot(N, H), 0.0);\n    float NL = max(dot(N, L), 0.001);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      finalColor = s.lightmap.a * s.lightmap.rgb + (1.0 - s.lightmap.a) * finalColor;\n    #endif\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    finalColor *= (diffuseContrib + specularContrib);\n    float fAmb = 0.5 - N.y * 0.5;\n    vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n    finalColor += (ambDiff.rgb * diffuse);\n    #if CC_USE_IBL\n      vec3 R = normalize(reflect(-V, N));\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n      finalColor += env * cc_ambientSky.w * specular;\n    #endif\n    finalColor = finalColor * s.occlusion;\n    #if CC_USE_HDR\n      s.emissive *= cc_exposure.w;\n    #endif\n    finalColor += s.emissive;\n    #if CC_RECEIVE_SHADOW\n    {\n      float pcf = cc_shadowInfo.z + 0.001;\n      float shadowAttenuation = 0.0;\n      if (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25();\n      else if (3.0 > pcf && pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9();\n      else if (2.0 > pcf && pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5();\n      else shadowAttenuation = CCGetShadowFactorX1();\n      vec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\n      finalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n    }\n    #endif\n    return vec4(finalColor, s.albedo.a);\n  }\n#endif\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec2 v_luv;\nlayout(set = 2, binding = 9) uniform sampler2D cc_lightingMap;\n#endif\nlayout(location = 2) in vec3 v_position;\nlayout(location = 4) in vec2 v_uv;\nlayout(location = 5) in vec2 v_uv1;\nlayout(location = 3) in vec3 v_normal;\nlayout(location = 6) in float v_fog_factor;\n#if USE_VERTEX_COLOR\n  layout(location = 1) in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 7) in vec3 v_tangent;\n  layout(location = 8) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor *= v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    s.lightmap = texture(cc_lightingMap, v_luv);\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * pbrParams.w) * normalize(v_tangent) +\n      (nmmp.y * pbrParams.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\nvec4 frag () {\n  StandardSurface s; surf(s);\n  vec4 color = CCStandardShading(s);\n  color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nlayout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n            ivec2 texSize = textureSize(tex, 0);\n            return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture(tex, x)),\n            decode32(texture(tex, y)),\n            decode32(texture(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  in vec4 a_joints;\nin vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(std140) uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  layout(std140) uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  uniform highp sampler2D cc_jointTexture;\n  #else\n  layout(std140) uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n    vec4 wPos = pos;\n    float cam_dis = distance(cc_cameraPos, wPos);\n    float fogStart = cc_fogBase.x;\n    float fogEnd = cc_fogBase.y;\n    return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n    float f = exp(-cam_dis * fogDensity);\n    return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n    float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n    return f;\n}\nfloat LayeredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float _FogTop = cc_fogAdd.x;\n    float _FogRange = cc_fogAdd.y;\n    vec3 camWorldProj = cc_cameraPos.xyz;\n    camWorldProj.y = 0.;\n    vec3 worldPosProj = wPos.xyz;\n    worldPosProj.y = 0.;\n    float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n    float fDeltaY, fDensityIntegral;\n    if (cc_cameraPos.y > _FogTop) {\n        if (wPos.y < _FogTop) {\n            fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n            fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n        } else {\n            fDeltaY = 0.;\n            fDensityIntegral = 0.;\n        }\n    } else {\n        if (wPos.y < _FogTop) {\n            float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n            float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n            fDeltaY = abs(fDeltaA - fDeltaB);\n            fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n        } else {\n            fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n            fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n        }\n    }\n    float fDensity;\n    if (fDeltaY != 0.) {\n        fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n    } else {\n        fDensity = 0.;\n    }\n    float f = exp(-fDensity);\n    return f;\n}\nfloat CC_TRANSFER_FOG(vec4 pos) {\n    #if CC_USE_FOG == 0\n        return LinearFog(pos);\n\t#elif CC_USE_FOG == 1\n        return ExpFog(pos);\n    #elif CC_USE_FOG == 2\n        return ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n        return LayeredFog(pos);\n    #endif\n    return 1.;\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowColor;\n  lowp  vec4 cc_shadowInfo;\n};\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\nout float v_fog_factor;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec2 v_luv;\nvoid CCLightingMapCaclUV()\n{\n#if !USE_INSTANCING\n      v_luv = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n#else\n      v_luv = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n#endif\n}\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_fog_factor = CC_TRANSFER_FOG(pos);\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n    v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowColor;\n  lowp  vec4 cc_shadowInfo;\n};\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\n#endif\n#if CC_RECEIVE_SHADOW\nin highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n  float CCGetShadowFactorX1 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    float shadow = step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow;\n  }\n  float CCGetShadowFactorX5 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow / 5.0;\n  }\n  float CCGetShadowFactorX9 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -1; i <= 1; i++) {\n      for (int j = -1; j <= 1; j++) {\n        float closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 9.0;\n  }\n  float CCGetShadowFactorX25 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -2; i <= 2; i++) {\n      for (int j = -2; j <= 2; j++) {\n        float closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 25.0;\n  }\n  float CCGetDirLightShadowFactorX1 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    float shadow = step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow;\n  }\n  float CCGetDirLightShadowFactorX5 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    return shadow / 5.0;\n  }\n  float CCGetDirLightShadowFactorX9 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -1; i <= 1; i++) {\n      for (int j = -1; j <= 1; j++) {\n        float closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 9.0;\n  }\n  float CCGetDirLightShadowFactorX25 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -2; i <= 2; i++) {\n      for (int j = -2; j <= 2; j++) {\n        float closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 25.0;\n  }\n#endif\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness*0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n  vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec4 lightmap;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\n#if CC_FORWARD_ADD\nlayout(std140) uniform CCForwardLight {\n  highp vec4 cc_lightPos[1];\n  vec4 cc_lightColor[1];\n  vec4 cc_lightSizeRangeAngle[1];\n  vec4 cc_lightDir[1];\n};\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\n  vec4 CCStandardShading (StandardSurface s) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < 1; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n    #if CC_RECEIVE_SHADOW\n      if (cc_lightPos[i].w > 0.0) {\n    {\n      float pcf = cc_shadowInfo.z + 0.001;\n      float shadowAttenuation = 0.0;\n      if (pcf > 3.0) shadowAttenuation = CCGetDirLightShadowFactorX25();\n      else if (3.0 > pcf && pcf > 2.0) shadowAttenuation = CCGetDirLightShadowFactorX9();\n      else if (2.0 > pcf && pcf > 1.0) shadowAttenuation = CCGetDirLightShadowFactorX5();\n      else shadowAttenuation = CCGetDirLightShadowFactorX1();\n      lightColor *= 1.0 - shadowAttenuation;\n    }\n      }\n    #endif\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    finalColor = finalColor * s.occlusion;\n    return vec4(finalColor, 0.0);\n  }\n#else\n  vec4 CCStandardShading (StandardSurface s) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    vec3 H = normalize(L+V);\n    float NH = max(dot(N, H), 0.0);\n    float NL = max(dot(N, L), 0.001);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      finalColor = s.lightmap.a * s.lightmap.rgb + (1.0 - s.lightmap.a) * finalColor;\n    #endif\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    finalColor *= (diffuseContrib + specularContrib);\n    float fAmb = 0.5 - N.y * 0.5;\n    vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n    finalColor += (ambDiff.rgb * diffuse);\n    #if CC_USE_IBL\n      vec3 R = normalize(reflect(-V, N));\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n      finalColor += env * cc_ambientSky.w * specular;\n    #endif\n    finalColor = finalColor * s.occlusion;\n    #if CC_USE_HDR\n      s.emissive *= cc_exposure.w;\n    #endif\n    finalColor += s.emissive;\n    #if CC_RECEIVE_SHADOW\n    {\n      float pcf = cc_shadowInfo.z + 0.001;\n      float shadowAttenuation = 0.0;\n      if (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25();\n      else if (3.0 > pcf && pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9();\n      else if (2.0 > pcf && pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5();\n      else shadowAttenuation = CCGetShadowFactorX1();\n      vec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\n      finalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n    }\n    #endif\n    return vec4(finalColor, s.albedo.a);\n  }\n#endif\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec2 v_luv;\nuniform sampler2D cc_lightingMap;\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\nin float v_fog_factor;\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor *= v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    s.lightmap = texture(cc_lightingMap, v_luv);\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * pbrParams.w) * normalize(v_tangent) +\n      (nmmp.y * pbrParams.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\nvec4 frag () {\n  StandardSurface s; surf(s);\n  vec4 color = CCStandardShading(s);\n  color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n            int pixelIndex = elementIndex;\n            vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n            vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n            return texture2D(tex, uv);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture2D(tex, x)),\n            decode32(texture2D(tex, y)),\n            decode32(texture2D(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  attribute vec4 a_joints;\nattribute vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  uniform highp vec4 cc_jointTextureInfo;\n  uniform highp vec4 cc_jointAnimInfo;\n  uniform highp sampler2D cc_jointTexture;\n  #else\n  uniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matProj;\nuniform highp vec4 cc_cameraPos;\nuniform mediump vec4 cc_fogBase;\nuniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\nuniform highp mat4 cc_matWorld;\nuniform highp mat4 cc_matWorldIT;\nuniform highp vec4 cc_lightingMapUVParam;\n#endif\nuniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n    vec4 wPos = pos;\n    float cam_dis = distance(cc_cameraPos, wPos);\n    float fogStart = cc_fogBase.x;\n    float fogEnd = cc_fogBase.y;\n    return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n    float f = exp(-cam_dis * fogDensity);\n    return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n    float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n    return f;\n}\nfloat LayeredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float _FogTop = cc_fogAdd.x;\n    float _FogRange = cc_fogAdd.y;\n    vec3 camWorldProj = cc_cameraPos.xyz;\n    camWorldProj.y = 0.;\n    vec3 worldPosProj = wPos.xyz;\n    worldPosProj.y = 0.;\n    float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n    float fDeltaY, fDensityIntegral;\n    if (cc_cameraPos.y > _FogTop) {\n        if (wPos.y < _FogTop) {\n            fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n            fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n        } else {\n            fDeltaY = 0.;\n            fDensityIntegral = 0.;\n        }\n    } else {\n        if (wPos.y < _FogTop) {\n            float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n            float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n            fDeltaY = abs(fDeltaA - fDeltaB);\n            fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n        } else {\n            fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n            fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n        }\n    }\n    float fDensity;\n    if (fDeltaY != 0.) {\n        fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n    } else {\n        fDensity = 0.;\n    }\n    float f = exp(-fDensity);\n    return f;\n}\nfloat CC_TRANSFER_FOG(vec4 pos) {\n    #if CC_USE_FOG == 0\n        return LinearFog(pos);\n\t#elif CC_USE_FOG == 1\n        return ExpFog(pos);\n    #elif CC_USE_FOG == 2\n        return ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n        return LayeredFog(pos);\n    #endif\n    return 1.;\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying float v_fog_factor;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec2 v_luv;\nvoid CCLightingMapCaclUV()\n{\n#if !USE_INSTANCING\n      v_luv = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n#else\n      v_luv = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n#endif\n}\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_fog_factor = CC_TRANSFER_FOG(pos);\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n    v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\nuniform mediump vec4 cc_exposure;\nuniform mediump vec4 cc_mainLitDir;\nuniform mediump vec4 cc_mainLitColor;\nuniform mediump vec4 cc_ambientSky;\nuniform mediump vec4 cc_ambientGround;\nuniform mediump vec4 cc_fogColor;\nuniform lowp vec4 cc_shadowColor;\nuniform lowp vec4 cc_shadowInfo;\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return texture2DLodEXT(tex, coord, lod);\n    #else\n      return texture2D(tex, coord, lod);\n    #endif\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return textureCubeLodEXT(tex, coord, lod);\n    #else\n      return textureCube(tex, coord, lod);\n    #endif\n}\n#endif\n#if CC_RECEIVE_SHADOW\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n  float CCGetShadowFactorX1 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    float shadow = step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow;\n  }\n  float CCGetShadowFactorX5 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    closestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow / 5.0;\n  }\n  float CCGetShadowFactorX9 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -1; i <= 1; i++) {\n      for (int j = -1; j <= 1; j++) {\n        float closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 9.0;\n  }\n  float CCGetShadowFactorX25 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -2; i <= 2; i++) {\n      for (int j = -2; j <= 2; j++) {\n        float closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 25.0;\n  }\n  float CCGetDirLightShadowFactorX1 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    float shadow = step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow;\n  }\n  float CCGetDirLightShadowFactorX5 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    closestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    return shadow / 5.0;\n  }\n  float CCGetDirLightShadowFactorX9 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -1; i <= 1; i++) {\n      for (int j = -1; j <= 1; j++) {\n        float closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 9.0;\n  }\n  float CCGetDirLightShadowFactorX25 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -2; i <= 2; i++) {\n      for (int j = -2; j <= 2; j++) {\n        float closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 25.0;\n  }\n#endif\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness*0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n  vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec4 lightmap;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\n#if CC_FORWARD_ADD\nuniform highp vec4 cc_lightPos[1];\nuniform vec4 cc_lightColor[1];\nuniform vec4 cc_lightSizeRangeAngle[1];\nuniform vec4 cc_lightDir[1];\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\n  vec4 CCStandardShading (StandardSurface s) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < 1; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n    #if CC_RECEIVE_SHADOW\n      if (cc_lightPos[i].w > 0.0) {\n    {\n      float pcf = cc_shadowInfo.z + 0.001;\n      float shadowAttenuation = 0.0;\n      if (pcf > 3.0) shadowAttenuation = CCGetDirLightShadowFactorX25();\n      else if (3.0 > pcf && pcf > 2.0) shadowAttenuation = CCGetDirLightShadowFactorX9();\n      else if (2.0 > pcf && pcf > 1.0) shadowAttenuation = CCGetDirLightShadowFactorX5();\n      else shadowAttenuation = CCGetDirLightShadowFactorX1();\n      lightColor *= 1.0 - shadowAttenuation;\n    }\n      }\n    #endif\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    finalColor = finalColor * s.occlusion;\n    return vec4(finalColor, 0.0);\n  }\n#else\n  vec4 CCStandardShading (StandardSurface s) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    vec3 H = normalize(L+V);\n    float NH = max(dot(N, H), 0.0);\n    float NL = max(dot(N, L), 0.001);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      finalColor = s.lightmap.a * s.lightmap.rgb + (1.0 - s.lightmap.a) * finalColor;\n    #endif\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    finalColor *= (diffuseContrib + specularContrib);\n    float fAmb = 0.5 - N.y * 0.5;\n    vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n    finalColor += (ambDiff.rgb * diffuse);\n    #if CC_USE_IBL\n      vec3 R = normalize(reflect(-V, N));\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n      finalColor += env * cc_ambientSky.w * specular;\n    #endif\n    finalColor = finalColor * s.occlusion;\n    #if CC_USE_HDR\n      s.emissive *= cc_exposure.w;\n    #endif\n    finalColor += s.emissive;\n    #if CC_RECEIVE_SHADOW\n    {\n      float pcf = cc_shadowInfo.z + 0.001;\n      float shadowAttenuation = 0.0;\n      if (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25();\n      else if (3.0 > pcf && pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9();\n      else if (2.0 > pcf && pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5();\n      else shadowAttenuation = CCGetShadowFactorX1();\n      vec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\n      finalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n    }\n    #endif\n    return vec4(finalColor, s.albedo.a);\n  }\n#endif\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nuniform vec4 albedo;\nuniform vec4 albedoScaleAndCutoff;\nuniform vec4 pbrParams;\nuniform vec4 emissive;\nuniform vec4 emissiveScaleParam;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec2 v_luv;\nuniform sampler2D cc_lightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\nvarying float v_fog_factor;\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor *= v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    s.lightmap = texture2D(cc_lightingMap, v_luv);\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * pbrParams.w) * normalize(v_tangent) +\n      (nmmp.y * pbrParams.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\nvec4 frag () {\n  StandardSurface s; surf(s);\n  vec4 color = CCStandardShading(s);\n  color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n  return CCFragOutput(color);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplers":[{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD"]}],"samplers":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}]}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_SUPPORT_FLOAT_TEXTURE","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}],"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplers":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":12,"count":1,"stageFlags":1,"format":42,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","type":14,"count":1,"stageFlags":1,"format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_shadowPos","type":16,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":1,"location":1,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":1,"location":2,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":1,"location":3,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":4,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":1,"location":5,"defines":[]},{"name":"v_fog_factor","type":13,"count":1,"stageFlags":1,"location":6,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":1,"location":7,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":1,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":14,"count":1,"stageFlags":1,"location":9,"defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}]},{"hash":3020491,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int16: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n        return gl_VertexIndex;\n    }\nlayout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n            ivec2 texSize = textureSize(tex, 0);\n            return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture(tex, x)),\n            decode32(texture(tex, y)),\n            decode32(texture(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  layout(location = 4) in u16vec4 a_joints;\nlayout(location = 5) in vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    layout(location = 7) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(set = 2, binding = 3) uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n  #else\n  layout(set = 2, binding = 3) uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowColor;\n  lowp  vec4 cc_shadowInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 13) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_uv1;\nlayout(location = 2) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_uv1;\nlayout(location = 2) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  return packDepthToRGBA(v_clip_depth);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nlayout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n            ivec2 texSize = textureSize(tex, 0);\n            return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture(tex, x)),\n            decode32(texture(tex, y)),\n            decode32(texture(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  in vec4 a_joints;\nin vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(std140) uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  layout(std140) uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  uniform highp sampler2D cc_jointTexture;\n  #else\n  layout(std140) uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowColor;\n  lowp  vec4 cc_shadowInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nin vec2 v_uv;\nin vec2 v_uv1;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  return packDepthToRGBA(v_clip_depth);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n            int pixelIndex = elementIndex;\n            vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n            vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n            return texture2D(tex, uv);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture2D(tex, x)),\n            decode32(texture2D(tex, y)),\n            decode32(texture2D(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  attribute vec4 a_joints;\nattribute vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  uniform highp vec4 cc_jointTextureInfo;\n  uniform highp vec4 cc_jointAnimInfo;\n  uniform highp sampler2D cc_jointTexture;\n  #else\n  uniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\nuniform highp mat4 cc_matWorld;\nuniform highp mat4 cc_matWorldIT;\n#endif\nuniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform vec4 albedo;\nuniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  return packDepthToRGBA(v_clip_depth);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplers":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_SUPPORT_FLOAT_TEXTURE","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}],"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplers":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":12,"count":1,"stageFlags":1,"format":42,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_texCoord1","type":14,"count":1,"stageFlags":1,"format":21,"location":13,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":1,"location":1,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":1,"location":2,"defines":[]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs:vert|standard-fs:frag","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}},"migrations":{"properties":{"pbrParams":{"removeImmediately":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs:vert|standard-fs:frag","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs:vert|standard-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs:vert|standard-fs:frag","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[{"fmt":"1","w":0,"h":0}],[1],0,[],[],[]],[[{"fmt":"1","w":0,"h":0}],[1],0,[],[],[]],[[[19,"main"],[20,"ironman","83W1wMmJ5Bx5dP0VDJm72T",[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113],[1,106.729,174.837,-82.504],[3,0.04340556297298887,0.29216608402544514,0.007738500791020965,0.9553507481829602],[1,4.501,33.919,2.301]],[33,[-114,-115,-116,1,-117],[34,[35],[36,[4,4283190348]],[37,true,227],[38,true]]],[21,"Canvas",33554432,"04KQo206hKOJySEMEWRfbp",2,[-122,-123],[[17,-118,[0,"0dngp/9gNO34wUQjZfN/CX"],[5,960,640]],[39,-120,[0,"3f2oTdCepERZdpmIfLsrhd"],-119],[40,45,-121,[0,"e8a+bU/8dPDbbJguUzLdoF"]]],[1,480,320,0]],[42,["ddnWh+PGxYXKQsV/ABllfc"]],[22,"Label",33554432,3,[[17,-124,[0,"c68UOAlNhN171Umca6yVvF"],[5,400,78.24]],[43,"本遊戲為學習使用，若有侵權請告知，謝謝！\nivesshe@gmail.com\nBy Cocos Creator 3.8.0",20,20,24,-125,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4289177523]],[41,4,36.08,-126]],[1,0,-244.8,0]],[23,"Main Light","c0y6F5f+pAvI805TdmxIjx",2,[[44,-127,[45]]],[3,-0.24999999999999997,-0.24999999999999997,-0.06698729810778066,0.9330127018922194],[1,-30,-30,0]],[24,"Main Camera","c9DMICJLFO5IeO07EPon7U",2,[[46,14,1822425087,-128]],[1,112.07444500314716,179.39253492401443,-62.86754708756712],[3,0.02414244402776055,0.0021474135866359307,0.00005209912414520852,-0.9997059809311188],[1,-2.766794898346415,-0.2461480103391495,-0.000027501251027920493]],[25,"6aEPDh4KdM35aI8nmGLRGU",2,[48,"ddnWh+PGxYXKQsV/ABllfc",-129,[49,"cbWrZgh4pKtbZW8OJliNJr",[[50,"PikachuM",["name"],4],[12,["position"],4,[1,112.86052590950489,174.83714388158793,-82.50398080745565]],[12,["rotation"],4,[3,-6.938893903907228e-18,-1.3877787807814457e-17,1.734723475976807e-18,1]],[12,["scale"],4,[1,2,2,2]]]],0]],[3,"HD_Ironman:Plane03",1,[[4,-130,[0,"e0DXqM/KhSmpzhSaT1Ld+o"],[1],[1],2]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:Plane02",1,[[4,-131,[0,"44gHNZ6jVb+4FDAAdacl95"],[3],[1],4]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:Object12",1,[[4,-132,[0,"43+dVVGqpbb5GxzKG9HCJT"],[5],[1],6]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:Object11",1,[[4,-133,[0,"16WykYNCJfcYyI4CY9IqHE"],[7],[1],8]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:Object10",1,[[4,-134,[0,"c0rXMnZ1tWx50lL+dicohZ"],[9],[1],10]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:Object09",1,[[4,-135,[0,"28Wb8/uzhftbf/EnYhoj0u"],[11],[1],12]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:Object08",1,[[4,-136,[0,"95KlG4QBJR94j3bkdSqKH2"],[13],[1],14]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3966",1,[[4,-137,[0,"a61v6k/UBcMp3P6edneeVN"],[15],[1],16]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:Object07",1,[[4,-138,[0,"9bW6qdpBdaa44Yrd3I690E"],[17],[1],18]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:Object06",1,[[4,-139,[0,"11B8pyN7Rcubrj3YeAONLM"],[19],[1],20]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:Object05",1,[[4,-140,[0,"7aASF5uhZRDaZ0n6hVZQvZ"],[21],[1],22]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:Object04",1,[[4,-141,[0,"e8cjOkkLtfird54382RFQi"],[23],[1],24]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:Object03",1,[[4,-142,[0,"e3eQ9iqq1asLYW36LXxTy9"],[25],[1],26]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:Object02",1,[[4,-143,[0,"d0S6yZnW1QfpqgsE5RDhLA"],[27],[1],28]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:Object01",1,[[4,-144,[0,"86viXh9vxdFJ102aQDWu1u"],[29],[1],30]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3864",1,[[4,-145,[0,"60uAxAS/ZV665WPJRax+mW"],[31],[1],32]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3848",1,[[4,-146,[0,"f7BYGDlxlVHqJFQT7cz5rB"],[33],[1],34]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3666",1,[[4,-147,[0,"9dnCkl9MRXYY5mP26v4vQL"],[35],[1],36]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3060",1,[[4,-148,[0,"2dKbHNLwBRCpnRrN0C3mkL"],[37],[1],38]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3950",1,[[4,-149,[0,"6cl4v3mfBQO4JDA+ktbvrd"],[39],[1],40]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3875",1,[[4,-150,[0,"c1W83Jw3FaO7F9tAPsTY4P"],[41],[1],42]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3874",1,[[4,-151,[0,"2375c8avBez4ek12tn0iJQ"],[43],[1],44]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3891",1,[[4,-152,[0,"a8w6T1aEhdk7fFpUTUJQUz"],[45],[1],46]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3094",1,[[4,-153,[0,"55KJ+fGRBUO6eIJiLLSjEq"],[47],[1],48]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3090",1,[[4,-154,[0,"dd+aotBbNahbtZmhzpOEJv"],[49],[1],50]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3892",1,[[4,-155,[0,"3aGrHk+nBSxJjsXkNiTrPH"],[51],[1],52]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3893",1,[[4,-156,[0,"aeHSMEY71eea6mcQkdjb3H"],[53],[1],54]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3079",1,[[4,-157,[0,"afGe6VmkNVTJl9J6MP+oBX"],[55],[1],56]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3876",1,[[4,-158,[0,"b75UxQF0hUL7ICQYCDdR+Y"],[57],[1],58]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3877",1,[[4,-159,[0,"61uUCzkGFco7kOJ8h+ybWE"],[59],[1],60]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3878",1,[[4,-160,[0,"81WiaJsvRe9JKO+5aSsxcA"],[61],[1],62]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3880",1,[[4,-161,[0,"f7F3rnzrdTz6pke5SEFbg0"],[63],[1],64]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3882",1,[[4,-162,[0,"789VRed7xWAaG/M4jKe/ZS"],[65],[1],66]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3570",1,[[4,-163,[0,"a2l+TV+3lSaZKLGwauqIlY"],[67],[1],68]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3883_group1",1,[[4,-164,[0,"43NUQcLINSy4H/rilAQTG3"],[69],[1],70]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3559",1,[[4,-165,[0,"1aFP/s6xFfZJIWHYripc9h"],[71],[1],72]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3884",1,[[4,-166,[0,"76rSbFBgVX/bAzoioYNmsQ"],[73],[1],74]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3667",1,[[4,-167,[0,"cey6sfe85W45rC6t0qdSRn"],[75],[1],76]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3540",1,[[4,-168,[0,"e7wvI/HUlWeLVwGiH3QyM6"],[77],[1],78]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3890",1,[[4,-169,[0,"63eS1V0ttd455aQPm8F6lW"],[79],[1],80]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3885",1,[[4,-170,[0,"19BEiXdIVbzrTD2B6Hq2yV"],[81],[1],82]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface2765",1,[[4,-171,[0,"e2FeOI4LVSgZdfm4m82q+q"],[83],[1],84]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3873",1,[[4,-172,[0,"47o8JdC3FUDbk3PSZYRGsz"],[85],[1],86]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3949",1,[[4,-173,[0,"fdd8tqTIRZTrK/l0lWxfrI"],[87],[1],88]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3944",1,[[4,-174,[0,"d5Fo4mQoFUCb+DwY3GaoH1"],[89],[1],90]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3867",1,[[4,-175,[0,"8cyJQ+fpZXMaSxTsj4rwXe"],[91],[1],92]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3868",1,[[4,-176,[0,"d8mw1qCN5Y+oOK4Ki6Vi5r"],[93],[1],94]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3871",1,[[4,-177,[0,"41EJmppAFQ8Ix4Jb671BhB"],[95],[1],96]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3870",1,[[4,-178,[0,"58sshXGGhcF7En+JlWQAsG"],[97],[1],98]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3869",1,[[4,-179,[0,"96zpykthJRdqZMOWRJ2b+2"],[99],[1],100]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3423",1,[[4,-180,[0,"7coU82fRBflqGLptGMoxgP"],[101],[1],102]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3896_polySurface3916",1,[[4,-181,[0,"cbQgDGA0ZUDqPtniY1Xt8p"],[103],[1],104]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3581",1,[[4,-182,[0,"b6xkJShoJcTpnIwmE1QCer"],[105],[1],106]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3582",1,[[4,-183,[0,"318p+RGLFQa7VovsiSP8DG"],[107],[1],108]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3583",1,[[4,-184,[0,"fd8tvQTX5Txp7Oyyv4fr0V"],[109],[1],110]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3963",1,[[4,-185,[0,"5aWzO0x8VRQ66VM2hcxKfq"],[111],[1],112]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3584",1,[[4,-186,[0,"c5EMmIoKVexLItzHZ0Lv6H"],[113],[1],114]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3964",1,[[4,-187,[0,"2bKV6Q5YlVSqOLCdkIdvQD"],[115],[1],116]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3955",1,[[4,-188,[0,"a2hnbh0dBUmY4krtjcpxzY"],[117],[1],118]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3571",1,[[4,-189,[0,"398GOzwfBeGLAEwcPPDQxE"],[119],[1],120]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface2851",1,[[4,-190,[0,"fdnjF+HsdY5aLsECBsFjKt"],[121],[1],122]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3908_polySurface3896",1,[[4,-191,[0,"68CajzJOBaVJaI4vjdBsDk"],[123],[1],124]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3109",1,[[4,-192,[0,"151016GIlT4L248xKjJr2D"],[125],[1],126]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3154",1,[[4,-193,[0,"e94VboZapXTZDCn7QlGGbZ"],[127],[1],128]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3853",1,[[4,-194,[0,"f1PqBUG/NYLqyFNLALAj4o"],[129],[1],130]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3108",1,[[4,-195,[0,"962ckr1edXbKroReyEvyat"],[131],[1],132]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3148",1,[[4,-196,[0,"69kLfr+ZVSg6b3Z2uJXyUI"],[133],[1],134]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3852",1,[[4,-197,[0,"deClkYqh5TZK8J4QJGvs1o"],[135],[1],136]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3849",1,[[4,-198,[0,"f2/L7Fzj1Q0agkdqkvxzbz"],[137],[1],138]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3118",1,[[4,-199,[0,"d5jbZHzSxUz4ucPDu7TbW2"],[139],[1],140]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2631_polySurface2611",1,[[4,-200,[0,"23U3307Flcd5J+foMdT2m0"],[141],[1],142]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3956",1,[[4,-201,[0,"casQW4TQlUyIWM0IkkGWy4"],[143],[1],144]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3954",1,[[4,-202,[0,"87u90/ZV9dyLGc/Y0zDZdj"],[145],[1],146]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3587",1,[[4,-203,[0,"919IGtSo5eFZqV9RmJkRvB"],[147],[1],148]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3588",1,[[4,-204,[0,"a2Ifj/V01Sr4LTmBLLTFq/"],[149],[1],150]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3586",1,[[4,-205,[0,"f9RcETmGdfc5V9XsmcrQlR"],[151],[1],152]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3585",1,[[4,-206,[0,"c4Y5t6Ri9dRrHdqdt33JZB"],[153],[1],154]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3573",1,[[4,-207,[0,"b82kMJlX1Y34ExXOHpkxkI"],[155],[1],156]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3578",1,[[4,-208,[0,"90KaZ5JCVfwI4W7Y6wS1dT"],[157],[1],158]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3957",1,[[4,-209,[0,"84Ht8nr6lSGqsLTFwKijQW"],[159],[1],160]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3959",1,[[4,-210,[0,"de+jJlfylZ1J981lGGuSqV"],[161],[1],162]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3958",1,[[4,-211,[0,"b5EtCARMdab4PHhGcQ57SD"],[163],[1],164]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3960",1,[[4,-212,[0,"0aiICU1ZZbh7LRo6JtnG3y"],[165],[1],166]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3579",1,[[4,-213,[0,"273cpC2KRdkoF2qOwyv/3X"],[167],[1],168]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3962",1,[[4,-214,[0,"54lVKj3chQM5MqMJIMj7Gt"],[169],[1],170]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3961",1,[[4,-215,[0,"7bBlosbMVRbJ7eNmZvrGfq"],[171],[1],172]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2631_polySurface2610",1,[[4,-216,[0,"e05xNKuVRWvJ3pjmtoRWT1"],[173],[1],174]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3854",1,[[4,-217,[0,"ccdONmSEZR35zEqIHVo+zK"],[175],[1],176]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3855",1,[[4,-218,[0,"19zF/wPAtaPYORs3hT+1Lm"],[177],[1],178]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface2653",1,[[4,-219,[0,"e85Yx1wz1XFqREpaQkdDM3"],[179],[1],180]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface2652",1,[[4,-220,[0,"08BpaY+gJf8L5tgEwHIfLt"],[181],[1],182]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface2655",1,[[4,-221,[0,"dbTtj9cMlc77iaCvzlPnpC"],[183],[1],184]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface2654",1,[[4,-222,[0,"42BOoTESBQxIr3SiwJqkbC"],[185],[1],186]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface2651",1,[[4,-223,[0,"62/OrhSq9R2K6T5sERblQS"],[187],[1],188]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface2725",1,[[4,-224,[0,"43wj6c/+5dULlEwN/zFhiu"],[189],[1],190]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3860",1,[[4,-225,[0,"f4xnVXuBhQHYR2ezsEfyuR"],[191],[1],192]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3952",1,[[4,-226,[0,"7arixtObtZJrdEdW1P2HbN"],[193],[1],194]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3951",1,[[4,-227,[0,"deKtd6Sl1ceZl7wvcFOmC4"],[195],[1],196]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface2747",1,[[4,-228,[0,"d3lUw0F9RWJ6Hv20GZ/xiw"],[197],[1],198]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3862",1,[[4,-229,[0,"82h6tMzEtR/o49VvBoOjsd"],[199],[1],200]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3861",1,[[4,-230,[0,"e7lmpQatZdPYywwlxCH5yQ"],[201],[1],202]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3863",1,[[4,-231,[0,"f3ZKRClzJQqJAUGM5TYDgQ"],[203],[1],204]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3948",1,[[4,-232,[0,"1frXuhi4lUjL2uvx+RT/rr"],[205],[1],206]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3946",1,[[4,-233,[0,"460UDR9s9ShacJNi0QaWJh"],[207],[1],208]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3851",1,[[4,-234,[0,"70fBwN8rZWzqCIzi8gD0O4"],[209],[1],210]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3965",1,[[4,-235,[0,"41FcG+V5hTJIM0+YmN7BxN"],[211],[1],212]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface2642",1,[[4,-236,[0,"0bmXkDr7RenZnPrFcdfXsY"],[213],[1],214]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface2610_polySurface3572",1,[[4,-237,[0,"46pteK4+pSUqeDU2PDDFTD"],[215],[1],216]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3872",1,[[4,-238,[0,"abWcUa4M9QHqGFVRS59RHx"],[217],[1],218]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3865",1,[[4,-239,[0,"42nE3OJEFTQYkY7Yypn6KI"],[219],[1],220]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3850",1,[[4,-240,[0,"7b2maZlGNcnJ1VDyRkqkIH"],[221],[1],222]],[1,-0.0014858486829325557,0.0009981464827433228,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"HD_Ironman:polySurface3967",1,[[4,-241,[0,"b0Z3EGbB9VO7DbBpdR3t0v"],[223],[1],224]],[1,-0.0014858486829325557,-2.614701271057129,0.23890286684036255],[1,20.70563507080078,20.70563507080078,20.70563507080078]],[3,"Cylinder01",1,[[4,-242,[0,"3fFUInoDFYKqldTOiidoAL"],[225],[1],226]],[1,-0.002009263029322028,4.566855430603027,0.5910789370536804],[1,1.0041024684906006,1.0041024684906006,1]],[28,"Camera",3,[-243],[1,0,0,1000]],[47,0,1073741824,320,2000,6,41943040,122,[4,4278190080]]],0,[0,-1,9,0,-2,10,0,-3,11,0,-4,12,0,-5,13,0,-6,14,0,-7,15,0,-8,16,0,-9,17,0,-10,18,0,-11,19,0,-12,20,0,-13,21,0,-14,22,0,-15,23,0,-16,24,0,-17,25,0,-18,26,0,-19,27,0,-20,28,0,-21,29,0,-22,30,0,-23,31,0,-24,32,0,-25,33,0,-26,34,0,-27,35,0,-28,36,0,-29,37,0,-30,38,0,-31,39,0,-32,40,0,-33,41,0,-34,42,0,-35,43,0,-36,44,0,-37,45,0,-38,46,0,-39,47,0,-40,48,0,-41,49,0,-42,50,0,-43,51,0,-44,52,0,-45,53,0,-46,54,0,-47,55,0,-48,56,0,-49,57,0,-50,58,0,-51,59,0,-52,60,0,-53,61,0,-54,62,0,-55,63,0,-56,64,0,-57,65,0,-58,66,0,-59,67,0,-60,68,0,-61,69,0,-62,70,0,-63,71,0,-64,72,0,-65,73,0,-66,74,0,-67,75,0,-68,76,0,-69,77,0,-70,78,0,-71,79,0,-72,80,0,-73,81,0,-74,82,0,-75,83,0,-76,84,0,-77,85,0,-78,86,0,-79,87,0,-80,88,0,-81,89,0,-82,90,0,-83,91,0,-84,92,0,-85,93,0,-86,94,0,-87,95,0,-88,96,0,-89,97,0,-90,98,0,-91,99,0,-92,100,0,-93,101,0,-94,102,0,-95,103,0,-96,104,0,-97,105,0,-98,106,0,-99,107,0,-100,108,0,-101,109,0,-102,110,0,-103,111,0,-104,112,0,-105,113,0,-106,114,0,-107,115,0,-108,116,0,-109,117,0,-110,118,0,-111,119,0,-112,120,0,-113,121,0,-1,6,0,-2,7,0,-3,8,0,-5,3,0,0,3,0,6,123,0,0,3,0,0,3,0,-1,122,0,-2,5,0,0,5,0,0,5,0,0,5,0,0,6,0,0,7,0,5,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,26,0,0,27,0,0,28,0,0,29,0,0,30,0,0,31,0,0,32,0,0,33,0,0,34,0,0,35,0,0,36,0,0,37,0,0,38,0,0,39,0,0,40,0,0,41,0,0,42,0,0,43,0,0,44,0,0,45,0,0,46,0,0,47,0,0,48,0,0,49,0,0,50,0,0,51,0,0,52,0,0,53,0,0,54,0,0,55,0,0,56,0,0,57,0,0,58,0,0,59,0,0,60,0,0,61,0,0,62,0,0,63,0,0,64,0,0,65,0,0,66,0,0,67,0,0,68,0,0,69,0,0,70,0,0,71,0,0,72,0,0,73,0,0,74,0,0,75,0,0,76,0,0,77,0,0,78,0,0,79,0,0,80,0,0,81,0,0,82,0,0,83,0,0,84,0,0,85,0,0,86,0,0,87,0,0,88,0,0,89,0,0,90,0,0,91,0,0,92,0,0,93,0,0,94,0,0,95,0,0,96,0,0,97,0,0,98,0,0,99,0,0,100,0,0,101,0,0,102,0,0,103,0,0,104,0,0,105,0,0,106,0,0,107,0,0,108,0,0,109,0,0,110,0,0,111,0,0,112,0,0,113,0,0,114,0,0,115,0,0,116,0,0,117,0,0,118,0,0,119,0,0,120,0,0,121,0,-1,123,0,7,2,1,2,2,243],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[8,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,9],[7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,5,23,0,24,1,25,0,26,2,27,2,28,0,29,2,30,0,31,0,32,2,33,2,34,0,35,0,36,2,37,0,38,2,39,2,40,0,41,2,42,0,43,2,44,1,45,0,46,2,47,2,48,0,49,4,50,4,51,0,52,0,53,1,54,0,55,56,57,1,58,0,59,4,60,1,61,0,62,0,63,0,64,1,65,0,66,0,67,0,68,0,69,4,70,0,71,0,72,0,73,1,74,1,75,0,76,0,77,0,78,1,79,1,80,0,81,0,82,0,83,0,84,5,85,0,86,6,87,2,88,0,89,0,90,0,91,0,92,0,93,1,94,1,95,0,96,1,97,0,98,0,99,0,100,0,101,0,102,6,103,2,104,0,105,0,106,0,107,0,108,0,109,1,110,2,111,4,112,1,113,1,114,4,115,4,116,0,117,0,118,0,119,4,120,121,122,123]],[[{"fmt":"1","w":0,"h":0}],[1],0,[],[],[]],[[{"fmt":"1","w":0,"h":0}],[1],0,[],[],[]],[[[51],[26,"PikachuM",[-3,-4],[[52,-2,[0,"f1BPw4YBtQn51C453o09vv"]]],[5,"ddnWh+PGxYXKQsV/ABllfc",-1,0]],[29,"Hips",[[[6,"EndHips",-5,[5,"006GxO1XZdLYVIto/uHCRu",1,0],[1,0.3372308313846588,1.8480932116680254e-13,-4.572153216031438e-7]],-6,-7,-8,-9],4,1,1,1,1],[5,"92xLd5veBRdL8yqm4b8pQ0",1,0],[3,0.04314060776183979,5.4684646583080444e-8,0.9990690106095435,-0.000001266410859836509],[1,-179.99998747887025,-175.05491579697213,-0.0001447145533636713]],[30,"pm0025_00_pikachu",1,[[-10,-11,[13,"pm0025_00_BodySkin",-12,[5,"065hJw63VRGrpHfHAu44SV",1,0]]],1,1,4],[5,"ef4o3CMB5X17FLTia0Y/ZC",1,0]],[14,"Spine2",[-13,-14,-15],[5,"42W5bhsbhY/rciqaqrybEX",1,0],[1,0.14100508391857147,-9.240466058340127e-14,5.639932896936113e-18],[3,2.383548981990691e-24,-0.07636662693165483,-4.080061367627046e-22,0.9970798053772234],[1,-3.2981128167106836e-21,-8.759498979361084,-4.6638386718940254e-20]],[31,"Head",4,[[[6,"EndHead",-16,[5,"a77kUDmQ5R9oxP8evF5bGC",1,0],[1,0.39143699407577515,2.772139885264674e-13,2.4223327343975143e-8]],-17,-18],4,1,1],[5,"bfAkJuN4BfFKl0gFBZuEio",1,0],[1,0.22435016930103302,-3.696186423336051e-13,-2.255973158774445e-17],[3,6.082764538296695e-14,0.23737476913897546,-2.4892737223656166e-13,0.9714181483667156],[1,1.3542219157722399e-11,27.463297487325757,-2.6055097452354205e-11]],[14,"Waist",[2,-19],[5,"511xC8PI9fuLLJO2Z2frPj",1,0],[1,0,0.36284661293029785,0.006673138588666916],[3,0.030503389923433107,-0.030503276302080617,0.7064498562559297,0.7064472336515969],[1,90.00246768527728,-90.0024584701348,85.05518881760854]],[16,"LFoot",[[[6,"EndLFoot",-20,[5,"51/Nm/hxJbu6Ix3x0BB9oH",1,0],[1,0.20760571956634521,2.4223327343975143e-8,6.055831835993786e-9]],-21],4,1],[5,"a4oKggaP9S/KAD3gr2nLwb",1,0],[1,0.1679343730211258,0,4.3904780255843434e-8],[3,-1.7032519561737823e-7,0.8907169786922942,0.0000010266728723381958,-0.4545583173457376],[1,-0.00009591911940713281,-125.92696161620674,-0.00007086275970491985]],[16,"RFoot",[[[6,"EndRFoot",-22,[5,"b5p/WZ7MdWFbejxrQVujdv",1,0],[1,0.20760571956634521,1.5745162329494633e-7,1.2717246988813713e-7]],-23],4,1],[5,"75Fp6Q9YNQ44I3ZAg9EHpe",1,0],[1,0.16793443262577057,-1.0900497215970972e-7,-9.840726988841197e-8],[3,-6.23075337436332e-7,0.8907169907587815,7.787529807385789e-7,-0.4545582937012877],[1,-0.00004703117750959955,-125.92696465807298,-0.00010416056622880415]],[15,"Origin",3,[6],[5,"b9zVb5lT1aTI0wNvMRqYgA",1,0]],[9,"Feeler",2,[[6,"EndFeeler",-24,[5,"18x2sAtltbZ589cwfeCdBg",1,0],[1,0.19525493681430817,-3.442341856040108e-22,7.049916121170141e-19]]],[5,"e2kmYK0q9U0ZlSzeHBoVN7",1,0],[1,0.1030256375670433,3.696186423336051e-13,-0.0007278364500962198]],[7,"LThigh",2,[-25],[5,"74PC1E74JYzY7NgTVB/AfQ",1,0],[1,0.08128966391086578,0.16238296031951904,-0.05025720223784447],[3,-0.10155921370022236,-0.4219525431760383,0.04763314100074822,0.899651522145252],[1,-8.318709065877401,-49.53528590991214,9.869971963953326]],[7,"LLeg",11,[7],[5,"7cVcufgTJec7ZWqMSgLlen",1,0],[1,0.15915516018867493,-2.255973158774445e-17,-9.689330937590057e-8],[3,2.1988576823125267e-8,0.6831595466301696,3.105241294565038e-8,0.7302691516475687],[1,-5.908539034993506e-7,86.18207453560026,0.000004319909883923897]],[9,"LToe",7,[[6,"EndLToe",-26,[5,"96xfrhxKlUJZ0TmfoCCGLS",1,0],[1,0.08311941474676132,-3.6334991904141134e-8,-3.027915917996893e-9]]],[5,"b5uyo9Ht9W/7NcfViGuHyl",1,0],[1,0.12639294564723969,0,-0.027035759761929512]],[7,"RThigh",2,[-27],[5,"6f+XMF5r1bJpBLmlcgrsjj",1,0],[1,0.08128941804170609,-0.16238296031951904,-0.050257451832294464],[3,0.10155933245487186,-0.4219525412871304,-0.04763298060003306,0.8996515181178822],[1,8.318729263230045,-49.53528496275061,-9.869960963110277]],[7,"RLeg",14,[8],[5,"a7GzvIwIxZ7ZrKCVSeunQx",1,0],[1,0.1591556966304779,-3.6334991904141134e-8,-1.4533996761656454e-7],[3,-1.1617782646154803e-7,0.683159270802249,3.990400065734459e-8,0.7302694096817449],[1,-0.000012845931575518291,86.18203125355045,-0.000005755623261053973]],[9,"RToe",8,[[6,"EndRToe",-28,[5,"e4lUPZ/bJVtJlNmsm4tvF1",1,0],[1,0.0831194519996643,-2.5434493977627426e-7,2.5737286080129707e-8]]],[5,"20HkGh76Vd+bPPJqCDJD/L",1,0],[1,0.12639039754867554,2.1800994431941945e-7,-0.02703576534986496]],[7,"Tail1",2,[-29],[5,"11n8f76BlU/qAozc1DGffr",1,0],[1,0.09948518127202988,0,-0.22913630306720734],[3,-0.5716824463625624,7.246595060063989e-7,0.8204749725124522,0.0000010400266195685894],[1,-179.99986373574512,110.2647372441439,0.00005031035747868341]],[7,"Tail2",17,[-30],[5,"5dh0n3T/RT8JJD9fy1WMzr",1,0],[1,0.1398204118013382,-1.8480932116680254e-13,1.2111663671987571e-8],[3,2.75890985201758e-7,-0.38789213020558716,-2.4555686396112287e-7,0.9217047766635666],[1,0.000018224694700865407,-45.64681003014805,-0.00003819873826431785]],[11,"Tail3",18,[[6,"EndTail3",-31,[5,"80It8rmK5V6KbxW3jbCMGZ",1,0],[1,0.42838120460510254,-2.540000920703278e-8,-4.8446654687950286e-8]]],[5,"87bWrarQ5WoaNZYJ3d8zs5",1,0],[1,0.3262375593185425,-2.5399824465921483e-8,1.2111663671987571e-8],[3,8.662544875764332e-14,-0.1215749742950195,2.396830810188652e-13,0.9925822513148043],[1,1.3192049263059101e-11,-13.966015079970415,2.6055105097672146e-11]],[15,"Spine1",6,[4],[5,"b5UbTEO7ZX9JFY9Mdqty9E",1,0]],[7,"LEar1",5,[-32],[5,"467FZJGbpTAI8dcoRCS5R/",1,0],[1,0.3034438192844391,-0.15853562951087952,0.013908162713050842],[3,0.19823476804364182,0.014902697044150915,-0.3646277511592962,0.9096853793724553],[1,29.544133875654673,13.170497687774752,-41.10831528909189]],[10,"LEar2",21,[-33],[5,"71a3X9vOJbgITve3cV7QjG",1,0],[1,0.135458305478096,4.8446654687950286e-8,1.2111663671987571e-8]],[9,"LEar3",22,[[6,"EndLEar3",-34,[5,"7e01goCRdYe7ELQUCj9H9j",1,0],[1,0.1412239372730255,-4.8446654687950286e-8,1.2111663671987571e-8]]],[5,"80Py9WniFba6VnOB7YcBxV",1,0],[1,0.12959082424640656,-1.9378661875180114e-7,1.2111663671987571e-8]],[7,"REar1",5,[-35],[5,"35jqr5jqpcGqik5bXUZkCg",1,0],[1,0.30344364047050476,0.1585356444120407,0.013908041641116142],[3,-0.19823480896280402,0.014902653918819092,0.3646277740008393,0.9096853620064738],[1,-29.544138775530318,13.170495252674751,41.10831869362255]],[10,"REar2",24,[-36],[5,"327NyyWYpWw6DnUg7dxuqq",1,0],[1,0.13545800745487213,3.875732375036023e-7,-1.0900497215970972e-7]],[9,"REar3",25,[[6,"EndREar3",-37,[5,"e9pOVy6EZeJo1uEbVySqBZ",1,0],[1,0.14122354984283447,0.0000014533997045873548,-1.9378661875180114e-7]]],[5,"f0dz8X8VNec6CG/8zUQG4h",1,0],[1,0.12959150969982147,-0.0000012596129863595706,6.055832102447312e-8]],[7,"LShoulder",4,[-38],[5,"e8qY3utwtQEqYLHm5E5MGm",1,0],[1,0.08187538385391235,-0.08981569856405258,0.03418842330574989],[3,-0.31814777657517945,-0.22739340226568508,-0.5373179879872374,0.7472373201678655],[1,-72.99498041112479,-64.9124684856958,-41.171772714366476]],[7,"LArm",27,[-39],[5,"a7RL5p1Gxds7y2/1Buqhg/",1,0],[1,0.1300162822008133,-9.689330937590057e-8,-4.8446654687950286e-8],[3,0.1933570492919883,-0.03133185189583892,0.09129252976618935,0.9763693156561006],[1,22.873602726335164,-5.61521141506631,9.564278112236709]],[10,"LForeArm",28,[-40],[5,"53F/BC7JNSrJP+3kyLEp1c",1,0],[1,0.1377285122871399,0,2.4223327343975143e-8]],[11,"LHand",29,[[6,"EndLHand",-41,[5,"eawJQnEOBTJ75SXF04p3IO",1,0],[1,0.08620888739824295,-4.51194631754889e-17,-4.51194631754889e-17]]],[5,"6fHitlmLxeXY4kpSVQFype",1,0],[1,0.11359693855047226,2.4223327343975143e-8,-4.8446654687950286e-8],[3,0.11479144622620881,5.690803423353358e-9,-1.565792128990234e-8,0.9933896133306888],[1,13.183192273801644,8.537736285020675e-7,-0.0000017075472497301694]],[7,"RShoulder",4,[-42],[5,"552ksKrAJarZBURXjXCh/g",1,0],[1,0.08187615871429443,0.0898156687617302,0.034188415855169296],[3,0.3181478164528754,-0.2273934243681332,0.5373180050034778,0.7472372842273625],[1,72.99498828563692,-64.91247466372549,41.171769259280445]],[7,"RArm",31,[-43],[5,"32NMVRnD5dDYle5Dbbvomq",1,0],[1,0.13001605868339539,0.0000019378662727831397,3.1490324658989266e-7],[3,-0.1933569212741199,-0.03133182680605745,-0.09129248048870667,0.976369346421019],[1,-22.87358692728184,-5.6152061197915835,-9.5642738774153]],[10,"RForeArm",32,[-44],[5,"9eh0a2QfBTTL/oTLrBUN7i",1,0],[1,0.13772788643836975,-0.0000010900497500188067,-0.0000017925262909557205]],[11,"RHand",33,[[6,"EndRHand",-45,[5,"f5U+ng8ZxSpaJCurFuRqF9",1,0],[1,0.08620786666870117,-0.0000017925262909557205,-3.875732375036023e-7]]],[5,"a0m5OwBrxRrIlXDdBbte6i",1,0],[1,0.11359907686710358,4.360198886388389e-7,0.0000016956329318418284],[3,-0.11479143152140116,-2.9605317563709818e-8,-3.421051249545847e-9,0.9933896150299067],[1,-13.18319057754187,-0.000003415094585006374,0]],[32,"VriVis00",3,[[13,"pm0025_00_SippoSkin",-46,[5,"99i7GnZPdfu4NRwwESxa9+",1,0]]],[5,"8dJBH+Bf9fi7+NF7g0I5Jj",1,0]],[27,"PikachuM",1,[[53,-47,[0,"e4wym//b9a8K5MMPIx9yhy"],[0,1,2,3],[1],1,4,5]],[5,"88ynHHw79dBpWA6RqCrD3Q",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,5,1,0,0,1,0,-1,3,0,-2,36,0,2,2,0,-2,10,0,-3,11,0,-4,14,0,-5,17,0,-1,9,0,-2,35,0,2,3,0,-1,5,0,-2,27,0,-3,31,0,2,5,0,-2,21,0,-3,24,0,-2,20,0,2,7,0,-2,13,0,2,8,0,-2,16,0,2,10,0,-1,12,0,2,13,0,-1,15,0,2,16,0,-1,18,0,-1,19,0,2,19,0,-1,22,0,-1,23,0,2,23,0,-1,25,0,-1,26,0,2,26,0,-1,28,0,-1,29,0,-1,30,0,2,30,0,-1,32,0,-1,33,0,-1,34,0,2,34,0,2,35,0,0,36,0,10,1,2,2,6,4,2,20,6,2,9,7,2,12,8,2,15,47],[0,0,0,0,0,0],[-1,-2,-3,-4,1,11],[124,125,126,127,128,129]],[[[8,"Material #160",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.7071067690849304},"mainTexture",6,0]],11]]],0,0,[0,0],[4,3],[130,3]],[[[55,"Skin-0",3789599623,["pm0025_00_pikachu/Origin/Waist/Hips/Tail1","pm0025_00_pikachu/Origin/Waist/Hips/Tail1/Tail2","pm0025_00_pikachu/Origin/Waist/Hips/Tail1/Tail2/Tail3","pm0025_00_pikachu/Origin/Waist/Hips","pm0025_00_pikachu/Origin/Waist/Spine1","pm0025_00_pikachu/Origin/Waist/Spine1/Spine2","pm0025_00_pikachu/Origin/Waist/Spine1/Spine2/RShoulder","pm0025_00_pikachu/Origin/Waist/Spine1/Spine2/RShoulder/RArm","pm0025_00_pikachu/Origin/Waist/Spine1/Spine2/RShoulder/RArm/RForeArm","pm0025_00_pikachu/Origin/Waist/Spine1/Spine2/RShoulder/RArm/RForeArm/RHand","pm0025_00_pikachu/Origin/Waist/Spine1/Spine2/Head","pm0025_00_pikachu/Origin/Waist/Spine1/Spine2/LShoulder","pm0025_00_pikachu/Origin/Waist/Spine1/Spine2/LShoulder/LArm","pm0025_00_pikachu/Origin/Waist/Spine1/Spine2/Head/LEar1","pm0025_00_pikachu/Origin/Waist/Spine1/Spine2/Head/REar1","pm0025_00_pikachu/Origin/Waist/Spine1/Spine2/LShoulder/LArm/LForeArm","pm0025_00_pikachu/Origin/Waist/Spine1/Spine2/LShoulder/LArm/LForeArm/LHand","pm0025_00_pikachu/Origin/Waist/Spine1/Spine2/Head/LEar1/LEar2","pm0025_00_pikachu/Origin/Waist/Spine1/Spine2/Head/LEar1/LEar2/LEar3","pm0025_00_pikachu/Origin/Waist/Spine1/Spine2/Head/REar1/REar2","pm0025_00_pikachu/Origin/Waist/Spine1/Spine2/Head/REar1/REar2/REar3","pm0025_00_pikachu/Origin/Waist/Hips/LThigh","pm0025_00_pikachu/Origin/Waist/Hips/LThigh/LLeg","pm0025_00_pikachu/Origin/Waist/Hips/LThigh/LLeg/LFoot","pm0025_00_pikachu/Origin/Waist/Hips/LThigh/LLeg/LFoot/LToe","pm0025_00_pikachu/Origin/Waist/Hips/Feeler","pm0025_00_pikachu/Origin/Waist/Hips/RThigh","pm0025_00_pikachu/Origin/Waist/Hips/RThigh/RLeg","pm0025_00_pikachu/Origin/Waist/Hips/RThigh/RLeg/RFoot","pm0025_00_pikachu/Origin/Waist/Hips/RThigh/RLeg/RFoot/RToe"],[[[7,-0.000001086809902517416,-1,-0.000003574597940314561,0,0.9381042718887329,2.185341401172991e-7,-0.3463537096977234,0,0.3463537096977234,-0.0000037297643302736105,0.9381042718887329,0,-0.2999090254306793,0.0000016070035826487583,-0.17000864446163177,1],[7,-0.0000026490665732126217,-1,-0.0000014037319715498597,0,0.408151239156723,2.0026759273150674e-7,-0.9129146933555603,0,0.9129146933555603,-0.0000029913048820162658,0.408151239156723,0,-0.42896950244903564,0.0000013832208196618012,0.19557638466358185,1],[7,-0.0000029095428999426076,-1,-7.228960043903498e-7,0,0.1757572889328003,2.002698096248423e-7,-0.9844338297843933,0,0.9844338297843933,-0.0000029913048820162658,0.1757572889328003,0,-0.6856807470321655,0.0000014086197097640252,0.3720613718032837,1],[7,6.123235586414819e-17,1,-2.185209666549781e-7,0,-6.123235586414819e-17,-2.1852090981155925e-7,-1.000000238418579,0,-1.000000238418579,6.123235586414819e-17,6.123234262925839e-17,0,0.362846702337265,-1.4581954532744135e-9,-0.006673026364296675,1],[7,-0.0000037252834772516508,-1,3.223030660137738e-7,0,-0.08619584888219833,4.008215200718146e-13,-0.9962784051895142,0,0.9962784051895142,-0.000003739199428309803,-0.08619584888219833,0,-0.3620714247226715,0.0000013567558880822617,0.0246276818215847,1],[7,-0.000003632750349424896,-1,8.858573323777819e-7,0,-0.23691098392009735,1.1386856355825176e-13,-0.9715315699577332,0,0.9715315699577332,-0.000003739199428309803,-0.23691098392009735,0,-0.4934583008289337,0.0000013567560017690994,0.10095257312059402,1],[7,-0.6583194732666016,-0.2201390266418457,0.7198295593261719,0,-0.7379322648048401,3.6019361004946404e-7,-0.6748749613761902,0,0.14856603741645813,-0.9754687547683716,-0.16244785487651825,0,-0.19723708927631378,0.5409002304077148,0.10981030762195587,1],[7,-0.5400225520133972,-0.593016505241394,0.5972500443458557,0,-0.7892999053001404,0.11046331375837326,-0.6039901375770569,0,0.29220181703567505,-0.7975775599479675,-0.5277203321456909,0,-0.40043291449546814,0.38829922676086426,0.3171766996383667,1],[7,-0.540022611618042,-0.5930165648460388,0.5972501039505005,0,-0.7892999053001404,0.11046334356069565,-0.6039901971817017,0,0.29220184683799744,-0.7975776195526123,-0.5277203917503357,0,-0.5381608605384827,0.388300359249115,0.31717848777770996,1],[7,-0.540022611618042,-0.7136000394821167,0.4462636411190033,0,-0.7892999053001404,0.24530136585235596,-0.562879741191864,0,0.29220181703567505,-0.6562034487724304,-0.6957125067710876,0,-0.651759922504425,0.30572959780693054,0.3973756432533264,1],[7,-0.000003631902018241817,-1,-8.893247240848723e-7,0,0.2378385066986084,-9.09524734173106e-13,-0.9713046550750732,0,0.9713046550750732,-0.000003739199428309803,0.2378385066986084,0,-0.6834732294082642,0.0000013567562291427748,-0.24146318435668945,1],[7,0.6583184003829956,-0.2201463282108307,-0.7198282480239868,0,-0.7379322052001953,-3.3701513757478097e-7,-0.6748750805854797,0,0.14857101440429688,0.9754670858383179,-0.16245321929454803,0,-0.19723866879940033,-0.540898859500885,0.10981225222349167,1],[7,0.5400203466415405,-0.5930225849151611,-0.5972458124160767,0,-0.7892997860908508,-0.11046343296766281,-0.6039901375770569,0,0.29220595955848694,0.7975727319717407,-0.5277250409126282,0,-0.40043455362319946,-0.3882982134819031,0.31717920303344727,1],[7,0.6574820280075073,-0.6555019021034241,0.371530145406723,0,0.3412409722805023,-0.18057161569595337,-0.9224688410758972,0,0.6717677116394043,0.7332879304885864,0.10496154427528381,0,-0.7844449281692505,-0.6459518074989319,-0.17817485332489014,1],[7,-0.6574869155883789,-0.6554962396621704,-0.3715309500694275,0,0.34124088287353516,0.1805717796087265,-0.9224686026573181,0,0.6717626452445984,-0.7332927584648132,0.10495856404304504,0,-0.7844429016113281,0.645953357219696,-0.17817358672618866,1],[7,0.5400203466415405,-0.5930225849151611,-0.5972458124160767,0,-0.7892997860908508,-0.11046343296766281,-0.6039901375770569,0,0.29220595955848694,0.7975727319717407,-0.5277250409126282,0,-0.5381630063056946,-0.38829824328422546,0.3171791732311249,1],[7,0.5400204062461853,-0.7136049270629883,-0.4462581276893616,0,-0.7892997860908508,-0.24530141055583954,-0.562879741191864,0,0.29220595955848694,0.6561976671218872,-0.6957159638404846,0,-0.6517599821090698,-0.30572742223739624,0.397377610206604,1],[7,0.6574819684028625,-0.6555019021034241,0.37153008580207825,0,0.34124094247817993,-0.18057160079479218,-0.9224687218666077,0,0.6717676520347595,0.7332879304885864,0.10496152937412262,0,-0.919903039932251,-0.6459518671035767,-0.17817482352256775,1],[7,0.6574819684028625,-0.6555019021034241,0.37153008580207825,0,0.3412409722805023,-0.18057167530059814,-0.9224685430526733,0,0.6717677116394043,0.7332878708839417,0.10496148467063904,0,-1.0494939088821411,-0.6459516882896423,-0.17817479372024536,1],[7,-0.6574869751930237,-0.6554961800575256,-0.3715309500694275,0,0.34124091267585754,0.1805717498064041,-0.9224686026573181,0,0.6717626452445984,-0.7332927584648132,0.10495857149362564,0,-0.9199008941650391,0.6459529399871826,-0.1781734973192215,1],[7,-0.6574869751930237,-0.6554961800575256,-0.3715309798717499,0,0.34124094247817993,0.1805717498064041,-0.9224685430526733,0,0.6717626452445984,-0.7332927584648132,0.10495858639478683,0,-1.049492359161377,0.6459542512893677,-0.17817357182502747,1],[7,0.17141671478748322,0.9748337268829346,0.1425331085920334,0,-0.7495488524436951,0.22293353080749512,-0.6232797503471375,0,-0.639369547367096,0.0000050449757509341,0.7688999176025391,0,0.18485233187675476,-0.16801458597183228,-0.2124699205160141,1],[7,-0.1308026909828186,0.9748334884643555,0.1805279403924942,0,0.5719870924949646,0.22293420135974884,-0.7893868088722229,0,-0.8097664713859558,0.00000573648139834404,-0.5867525935173035,0,0.21370932459831238,-0.16801461577415466,0.011492475867271423,1],[7,0.22293303906917572,0.9748336672782898,-0.000004342746251495555,0,-0.9748339056968689,0.22293297946453094,4.3609227873275813e-7,0,0.0000013932590263721067,0.000004136235475016292,1.0000001192092896,0,-0.01755223050713539,-0.1680145561695099,-0.04381047934293747,1],[7,0.22293300926685333,0.9748335480690002,-0.000004342746251495555,0,-0.9748337864875793,0.22293294966220856,4.3609210820250155e-7,0,0.0000013932586853115936,0.000004136235020268941,1.0000001192092896,0,-0.14394515752792358,-0.1680145263671875,-0.016774721443653107,1],[7,6.123235586414819e-17,1,-2.1852098086583283e-7,0,-6.123235586414819e-17,-2.1852092402241396e-7,-1.000000238418579,0,-1.000000238418579,6.123235586414819e-17,6.123234262925839e-17,0,0.2598210871219635,-6.469082904914103e-7,-0.0059457141906023026,1],[7,-0.17140886187553406,0.974833607673645,-0.14254333078861237,0,-0.7495487928390503,-0.22293402254581451,-0.6232796311378479,0,-0.6393717527389526,0.000007533470125054009,0.768898069858551,0,0.18485350906848907,0.16801011562347412,-0.21246933937072754,1],[7,0.13081331551074982,0.974833607673645,-0.1805199682712555,0,0.5719863176345825,-0.22293400764465332,-0.7893874049186707,0,-0.8097651600837708,0.000007427766377077205,-0.586754322052002,0,0.21370874345302582,0.1680101603269577,0.011493146419525146,1],[7,-0.22293570637702942,0.9748331308364868,-0.000006543574272654951,0,-0.9748330116271973,-0.2229357212781906,9.920242973748827e-7,0,-4.917382057101349e-7,0.0000066000498009088915,1.0000001192092896,0,-0.0175517238676548,0.16801026463508606,-0.04381003975868225,1],[7,-0.22293570637702942,0.9748331308364868,-0.000006543574272654951,0,-0.9748330116271973,-0.2229357212781906,9.920242973748827e-7,0,-4.917382057101349e-7,0.0000066000498009088915,1.0000001192092896,0,-0.14394210278987885,0.16801004111766815,-0.01677427627146244,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[8,"Material #162",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.7071067690849304},"mainTexture",6,0]],11]]],0,0,[0,0],[4,3],[131,3]],[[[2,".bin",249120,485313524,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":180000,"length":50328,"count":12582,"stride":4}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[1],"indexView":{"offset":236664,"length":1560,"count":390,"stride":4}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[2],"indexView":{"offset":243408,"length":1344,"count":336,"stride":4}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[3],"indexView":{"offset":248352,"length":768,"count":192,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":180000,"count":2500,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":230328,"length":6336,"count":88,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":238224,"length":5184,"count":72,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":244752,"length":3600,"count":50,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]]},"minPosition",8,[1,-0.43295061588287354,-0.41559988260269165,-0.0003727703879121691],"maxPosition",8,[1,0.4329507052898407,0.7692593336105347,1.303617000579834]]]],0,0,[],[],[]],[[[8,"Material #161",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.7071067690849304},"mainTexture",6,0]],11]]],0,0,[0,0],[4,3],[132,3]],[[[8,"Material #163",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.7071067690849304},"mainTexture",6,0]],11]]],0,0,[0,0],[4,3],[133,3]],[[{"fmt":"1","w":0,"h":0}],[1],0,[],[],[]],[[[2,".bin",25488,432443072,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":13056,"length":12432,"count":3108,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":13056,"count":544,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.060733113437891006,0.1579936295747757,-0.022206395864486694],"maxPosition",8,[1,-0.03642607107758522,0.20142734050750732,0.008874458260834217]]]],0,0,[],[],[]],[[[2,".bin",13104,2794162248,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6960,"length":6144,"count":1536,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6960,"count":290,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.04749089851975441,0.15043945610523224,0.010342004708945751],"maxPosition",8,[1,0.055130355060100555,0.16076315939426422,0.023091517388820648]]]],0,0,[],[],[]],[[[2,".bin",105336,718754406,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":59472,"length":45864,"count":11466,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":59472,"count":2478,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.016224494203925133,0.22552809119224548,-0.03432813659310341],"maxPosition",8,[1,0.029782291501760483,0.2521425485610962,-0.02537054382264614]]]],0,0,[],[],[]],[[[2,".bin",21552,2441566428,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11568,"length":9984,"count":2496,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11568,"count":482,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.050684116780757904,0.13591068983078003,0.010831509716808796],"maxPosition",8,[1,0.059018876403570175,0.1509678214788437,0.018463952466845512]]]],0,0,[],[],[]],[[[2,".bin",112608,2926993003,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":57456,"length":55152,"count":13788,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":57456,"count":2394,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.012716762721538544,0.2537941038608551,-0.01625017076730728],"maxPosition",8,[1,0.012716859579086304,0.2927047908306122,0.017913635820150375]]]],0,0,[],[],[]],[[[2,".bin",3024,2313793400,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1584,"length":1440,"count":360,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1584,"count":66,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.029489673674106598,0.16038484871387482,-0.00929032452404499],"maxPosition",8,[1,-0.026628220453858376,0.16345344483852386,-0.0012505050981417298]]]],0,0,[],[],[]],[[[2,".bin",21336,1708696002,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11352,"length":9984,"count":2496,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11352,"count":473,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.048942361027002335,0.13327781856060028,0.0027667884714901447],"maxPosition",8,[1,0.05721046030521393,0.14870943129062653,0.010804863646626472]]]],0,0,[],[],[]],[[[2,".bin",25488,95410762,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":13056,"length":12432,"count":3108,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":13056,"count":544,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.0364462248980999,0.15798477828502655,-0.022193606942892075],"maxPosition",8,[1,0.060753267258405685,0.20141851902008057,0.008887248113751411]]]],0,0,[],[],[]],[[[2,".bin",21552,3326554067,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11568,"length":9984,"count":2496,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11568,"count":482,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.058394111692905426,0.13339196145534515,0.006702207028865814],"maxPosition",8,[1,-0.05017368122935295,0.14944814145565033,0.015287099406123161]]]],0,0,[],[],[]],[[[2,".bin",3840,1843414482,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1968,"length":1872,"count":468,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1968,"count":82,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.021847309544682503,0.15700165927410126,-0.026610197499394417],"maxPosition",8,[1,0.021847309544682503,0.1793791949748993,0.013452085666358471]]]],0,0,[],[],[]],[[[2,".bin",6672,187461346,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3360,"length":3312,"count":828,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3360,"count":140,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.039275120943784714,0.04645685479044914,-0.03542961925268173],"maxPosition",8,[1,-0.0127890445291996,0.08374876528978348,-0.01821400411427021]]]],0,0,[],[],[]],[[[2,".bin",12480,1075707760,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6600,"length":5880,"count":1470,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6600,"count":275,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.006029186304658651,0.20652635395526886,-0.03701324388384819],"maxPosition",8,[1,0.019823402166366577,0.2311296910047531,-0.02793007902801037]]]],0,0,[],[],[]],[[[2,".bin",6768,2527530507,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3504,"length":3264,"count":816,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3504,"count":146,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.05527879670262337,0.0012747041182592511,-0.01046757772564888],"maxPosition",8,[1,-0.03234124183654785,0.007925073616206646,0.002790527418255806]]]],0,0,[],[],[]],[[[2,".bin",20640,2117536515,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10176,"length":10464,"count":2616,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10176,"count":424,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.02325846441090107,0.01801634207367897,-0.034378521144390106],"maxPosition",8,[1,0.03588036820292473,0.04841681197285652,-0.026785187423229218]]]],0,0,[],[],[]],[[[2,".bin",16236,391520635,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8160,"length":8076,"count":2019,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8160,"count":340,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.02209361270070076,0.19101043045520782,-0.03468392789363861],"maxPosition",8,[1,0.02209361270070076,0.22852054238319397,-0.020687108859419823]]]],0,0,[],[],[]],[[[2,".bin",90996,2599765134,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":47520,"length":43476,"count":10869,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":47520,"count":1980,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.006232855841517448,0.21729642152786255,-0.03627685457468033],"maxPosition",8,[1,0.027963215485215187,0.2412424385547638,-0.028551746159791946]]]],0,0,[],[],[]],[[[2,".bin",66000,4091536644,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37920,"length":28080,"count":7020,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37920,"count":1580,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.006187461316585541,0.20677052438259125,-0.036314062774181366],"maxPosition",8,[1,0.01957865059375763,0.23054386675357819,-0.028161846101284027]]]],0,0,[],[],[]],[[[2,".bin",12624,1422648145,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6336,"length":6288,"count":1572,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6336,"count":264,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.026847586035728455,0.23024551570415497,-0.02479538507759571],"maxPosition",8,[1,0.05303436145186424,0.24972961843013763,0.003037023823708296]]]],0,0,[],[],[]],[[[2,".bin",60984,1278126950,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":30960,"length":30024,"count":7506,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":30960,"count":1290,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.05366029217839241,0.22581256926059723,-0.026707671582698822],"maxPosition",8,[1,-0.026479585096240044,0.2512483298778534,0.004935357719659805]]]],0,0,[],[],[]],[[[2,".bin",215484,1112563663,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":109992,"length":105492,"count":26373,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":109992,"count":4583,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.013690443709492683,0.011849470436573029,-0.034419603645801544],"maxPosition",8,[1,0.04889120161533356,0.08345265686511993,-0.01646566204726696]]]],0,0,[],[],[]],[[[2,".bin",10212,2078535410,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5136,"length":5076,"count":1269,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5136,"count":214,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.007915747351944447,0.23908618092536926,-0.01818261109292507],"maxPosition",8,[1,0.030901407822966576,0.2597244679927826,0.0023215636610984802]]]],0,0,[],[],[]],[[[2,".bin",75672,3746003486,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":45600,"length":30072,"count":7518,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":45600,"count":1900,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.030738627538084984,0.23950903117656708,-0.027648700401186943],"maxPosition",8,[1,-0.01940462924540043,0.2560257613658905,-0.01687881536781788]]]],0,0,[],[],[]],[[[2,".bin",92040,1817257922,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":46584,"length":45456,"count":11364,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":46584,"count":1941,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.0011191903613507748,0.09514923393726349,-0.02270336262881756],"maxPosition",8,[1,0.033808015286922455,0.1717153936624527,0.015265831723809242]]]],0,0,[],[],[]],[[[2,".bin",2352,245964048,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":1008,"count":252,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":56,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.058068547397851944,0.15836799144744873,-0.0036420258693397045],"maxPosition",8,[1,-0.048174966126680374,0.1709344983100891,0.0074807447381317616]]]],0,0,[],[],[]],[[[2,".bin",28128,1894832880,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":15696,"length":12432,"count":3108,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":15696,"count":654,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.006222924217581749,0.2336956262588501,-0.03543969616293907],"maxPosition",8,[1,0.01959996670484543,0.2598531246185303,-0.01707492768764496]]]],0,0,[],[],[]],[[[2,".bin",12192,2637005132,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6096,"length":6096,"count":1524,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6096,"count":254,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.05366222932934761,0.18422383069992065,-0.026706121861934662],"maxPosition",8,[1,-0.03412117436528206,0.20193302631378174,-0.004298962187021971]]]],0,0,[],[],[]],[[[2,".bin",32952,1837703448,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17400,"length":15552,"count":3888,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":17400,"count":725,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.017119690775871277,0.2416960448026657,-0.02206221967935562],"maxPosition",8,[1,0.017119690775871277,0.26990950107574463,0.007664648350328207]]]],0,0,[],[],[]],[[[2,".bin",2928,169762240,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1488,"length":1440,"count":360,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1488,"count":62,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.05703489109873772,0.1473270058631897,-0.005624462850391865],"maxPosition",8,[1,0.0630364641547203,0.17169257998466492,0.014646198600530624]]]],0,0,[],[],[]],[[[2,".bin",4272,1973336008,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2160,"length":2112,"count":528,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2160,"count":90,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.048159465193748474,0.014939785934984684,-0.033203400671482086],"maxPosition",8,[1,-0.035158704966306686,0.059372927993535995,-0.024704692885279655]]]],0,0,[],[],[]],[[[2,".bin",6768,2131855698,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3504,"length":3264,"count":816,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3504,"count":146,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.03319681063294411,0.0011846963316202164,-0.010893908329308033],"maxPosition",8,[1,0.05613455921411514,0.007835078053176403,0.002364196814596653]]]],0,0,[],[],[]],[[[2,".bin",7968,2529883555,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4320,"length":3648,"count":912,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4320,"count":180,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.016712352633476257,0.25118815898895264,-0.028395941480994225],"maxPosition",8,[1,-0.011724090203642845,0.25528714060783386,-0.024506255984306335]]]],0,0,[],[],[]],[[[2,".bin",47184,39687061,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24912,"length":22272,"count":5568,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24912,"count":1038,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.011894525960087776,0.2558737099170685,0.008556067012250423],"maxPosition",8,[1,0.011894622817635536,0.29007095098495483,0.019992578774690628]]]],0,0,[],[],[]],[[[2,".bin",21552,3541904548,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11568,"length":9984,"count":2496,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11568,"count":482,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.0589444637298584,0.13600894808769226,0.0109372204169631],"maxPosition",8,[1,-0.051232919096946716,0.15096375346183777,0.01857110485434532]]]],0,0,[],[],[]],[[[2,".bin",12480,2245647158,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6600,"length":5880,"count":1470,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6600,"count":275,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.019823208451271057,0.2065286785364151,-0.03701324388384819],"maxPosition",8,[1,-0.006029137875884771,0.23113007843494415,-0.02792232669889927]]]],0,0,[],[],[]],[[[2,".bin",3024,621043899,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1536,"length":1488,"count":372,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1536,"count":64,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.03156900405883789,0.011723702773451805,-0.031309716403484344],"maxPosition",8,[1,-0.018743429332971573,0.055113498121500015,-0.02246064506471157]]]],0,0,[],[],[]],[[[2,".bin",92040,2685018850,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":46584,"length":45456,"count":11364,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":46584,"count":1941,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.03365879878401756,0.09511822462081909,-0.022768184542655945],"maxPosition",8,[1,0.0009560281177982688,0.17167846858501434,0.015257014892995358]]]],0,0,[],[],[]],[[[2,".bin",2544,1762158736,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1536,"length":1008,"count":252,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1536,"count":64,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.008673501200973988,0.27053970098495483,0.014994433149695396],"maxPosition",8,[1,0.008673598058521748,0.2725924551486969,0.01860816590487957]]]],0,0,[],[],[]],[[[2,".bin",66024,3938780779,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37944,"length":28080,"count":7020,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37944,"count":1581,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.01957865059375763,0.20677071809768677,-0.036314062774181366],"maxPosition",8,[1,-0.006187461316585541,0.23054386675357819,-0.028161846101284027]]]],0,0,[],[],[]],[[[2,".bin",3360,4098732138,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":1440,"count":360,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":80,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.043514009565114975,0.020809777081012726,-0.0269541684538126],"maxPosition",8,[1,-0.01376669853925705,0.08288389444351196,-0.016308695077896118]]]],0,0,[],[],[]],[[[2,".bin",14688,3341865947,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7776,"length":6912,"count":1728,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7776,"count":324,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.006070947274565697,0.21690769493579865,-0.03644661232829094],"maxPosition",8,[1,0.028408149257302284,0.24153351783752441,-0.028170373290777206]]]],0,0,[],[],[]],[[[2,".bin",78072,4054478080,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":43272,"length":34800,"count":8700,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":43272,"count":1803,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.02731945738196373,0.13681761920452118,-0.028806865215301514],"maxPosition",8,[1,0.02731945738196373,0.1799435317516327,0.01550312340259552]]]],0,0,[],[],[]],[[[2,".bin",3264,1979290973,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1872,"length":1392,"count":348,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1872,"count":78,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.05178676173090935,0.18921945989131927,-0.021256841719150543],"maxPosition",8,[1,-0.03465253487229347,0.20562824606895447,-0.007387921214103699]]]],0,0,[],[],[]],[[[2,".bin",23088,2203513999,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11616,"length":11472,"count":2868,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11616,"count":484,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.052022404968738556,0.19002890586853027,-0.030515966936945915],"maxPosition",8,[1,-0.032290082424879074,0.20379434525966644,-0.01551727019250393]]]],0,0,[],[],[]],[[[2,".bin",13992,2471342934,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7248,"length":6744,"count":1686,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7248,"count":302,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.01976294070482254,0.23356209695339203,-0.03564433753490448],"maxPosition",8,[1,-0.006137900520116091,0.2601254880428314,-0.01687493920326233]]]],0,0,[],[],[]],[[[2,".bin",29520,1909968840,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":15408,"length":14112,"count":3528,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":15408,"count":642,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.029966387897729874,0.225088968873024,-0.03429558128118515],"maxPosition",8,[1,-0.016044950112700462,0.2523820698261261,-0.025096917524933815]]]],0,0,[],[],[]],[[[2,".bin",20640,3011094470,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10176,"length":10464,"count":2616,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10176,"count":424,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.029954567551612854,0.018469996750354767,-0.034587811678647995],"maxPosition",8,[1,0.041183918714523315,0.05053548142313957,-0.029139306396245956]]]],0,0,[],[],[]],[[[2,".bin",32208,3489411385,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17952,"length":14256,"count":3564,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":17952,"count":748,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.017701826989650726,0.20734421908855438,-0.023714831098914146],"maxPosition",8,[1,0.03252921625971794,0.24542920291423798,0.013148809783160686]]]],0,0,[],[],[]],[[[2,".bin",1393896,2828392110,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1064832,"length":329064,"count":82266,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1064832,"count":44368,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.02867770753800869,0.20497499406337738,-0.030153198167681694],"maxPosition",8,[1,0.02867751382291317,0.24844011664390564,0.019079456105828285]]]],0,0,[],[],[]],[[[2,".bin",13992,4031941142,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7248,"length":6744,"count":1686,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7248,"count":302,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.006137948948889971,0.23356209695339203,-0.03564433753490448],"maxPosition",8,[1,0.01976313441991806,0.26012539863586426,-0.01687493920326233]]]],0,0,[],[],[]],[[[2,".bin",3360,2916700810,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":1440,"count":360,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":80,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.014221128076314926,0.0209210105240345,-0.027026256546378136],"maxPosition",8,[1,0.044287994503974915,0.08301644772291183,-0.0164970550686121]]]],0,0,[],[],[]],[[[2,".bin",3024,636559728,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1584,"length":1440,"count":360,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1584,"count":66,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.026463694870471954,0.16042545437812805,-0.009148860350251198],"maxPosition",8,[1,0.02928697131574154,0.16351090371608734,-0.0011040023528039455]]]],0,0,[],[],[]],[[[2,".bin",18720,1463341083,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9600,"length":9120,"count":2280,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9600,"count":400,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.032499760389328,0.22228477895259857,-0.020428210496902466],"maxPosition",8,[1,-0.02807638794183731,0.24486786127090454,0.0020882445387542248]]]],0,0,[],[],[]],[[[2,".bin",29292,3796670133,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14640,"length":14652,"count":3663,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14640,"count":610,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.030463645234704018,0.1998160034418106,-0.02769365906715393],"maxPosition",8,[1,0.05063179135322571,0.2373521775007248,-0.0008464599377475679]]]],0,0,[],[],[]],[[[2,".bin",13440,1577335655,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7008,"length":6432,"count":1608,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7008,"count":292,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.03899141773581505,0.021351991221308708,-0.0329902358353138],"maxPosition",8,[1,-0.01725476048886776,0.08848000317811966,0.0016828429652377963]]]],0,0,[],[],[]],[[[2,".bin",50568,2097204674,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25656,"length":24912,"count":6228,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25656,"count":1069,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.034363407641649246,0.00011225089838262647,-0.009568408131599426],"maxPosition",8,[1,0.05839100852608681,0.01298036053776741,0.019533691927790642]]]],0,0,[],[],[]],[[[2,".bin",105336,2657663432,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":59472,"length":45864,"count":11466,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":59472,"count":2478,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.029782291501760483,0.22552266716957092,-0.0341196246445179],"maxPosition",8,[1,-0.0163109228014946,0.25213712453842163,-0.02537054382264614]]]],0,0,[],[],[]],[[[8,"lambert1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.7071067690849304},"albedoScale",8,[1,0.4000000059604645,0.4000000059604645,0.4000000059604645]]],11]]],0,0,[0],[3],[3]],[[[2,".bin",25296,567067456,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12672,"length":12624,"count":3156,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12672,"count":528,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.050680238753557205,0.20478178560733795,-0.016720684245228767],"maxPosition",8,[1,-0.03178895264863968,0.22565361857414246,-0.0018991088727489114]]]],0,0,[],[],[]],[[[2,".bin",70908,154685522,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37032,"length":33876,"count":8469,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37032,"count":1543,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.005925268400460482,0.23366597294807434,-0.033419664949178696],"maxPosition",8,[1,0.021180683746933937,0.260184109210968,-0.016216838732361794]]]],0,0,[],[],[]],[[[2,".bin",21456,1033581129,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10992,"length":10464,"count":2616,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10992,"count":458,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.010544898919761181,0.2582395672798157,0.009067663922905922],"maxPosition",8,[1,0.010544995777308941,0.2730356454849243,0.01916937343776226]]]],0,0,[],[],[]],[[[8,"HD_Ironman:black",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.17407764494419098},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929]]],11]]],0,0,[0],[3],[3]],[[[2,".bin",7008,2835592897,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3648,"length":3360,"count":840,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3648,"count":152,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.01916491612792015,0.2390681654214859,-0.028126966208219528],"maxPosition",8,[1,0.030892299488186836,0.2570883631706238,-0.016898969188332558]]]],0,0,[],[],[]],[[[2,".bin",2928,388349073,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1488,"length":1440,"count":360,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1488,"count":62,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.06301592290401459,0.14733582735061646,-0.005637252703309059],"maxPosition",8,[1,-0.05701473727822304,0.17170138657093048,0.01463340874761343]]]],0,0,[],[],[]],[[[2,".bin",71904,1308755437,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37416,"length":34488,"count":8622,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37416,"count":1559,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.005785838700830936,0.0839710533618927,-0.02442554384469986],"maxPosition",8,[1,0.036909762769937515,0.1564580798149109,0.01629667915403843]]]],0,0,[],[],[]],[[[2,".bin",71208,3382624838,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":36696,"length":34512,"count":8628,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":36696,"count":1529,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.03666791692376137,0.0839882493019104,-0.024474281817674637],"maxPosition",8,[1,-0.005729737691581249,0.1563912332057953,0.01631741411983967]]]],0,0,[],[],[]],[[[2,".bin",21552,1868925650,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11568,"length":9984,"count":2496,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11568,"count":482,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.05546018108725548,0.13706304132938385,0.00000939865094551351],"maxPosition",8,[1,-0.04998880997300148,0.1484617441892624,0.005494880024343729]]]],0,0,[],[],[]],[[[2,".bin",29292,370652624,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14640,"length":14652,"count":3663,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14640,"count":610,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.05061086267232895,0.199826180934906,-0.02770916186273098],"maxPosition",8,[1,-0.03044252097606659,0.23736244440078735,-0.0008627380593679845]]]],0,0,[],[],[]],[[[2,".bin",21024,331370300,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10656,"length":10368,"count":2592,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10656,"count":444,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.012706879526376724,0.07776802778244019,-0.027822332456707954],"maxPosition",8,[1,0.0360962450504303,0.11470084637403488,0.006275198422372341]]]],0,0,[],[],[]],[[[2,".bin",6672,3609227348,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3360,"length":3312,"count":828,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3360,"count":140,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.013273317366838455,0.0464816577732563,-0.03530559688806534],"maxPosition",8,[1,0.03976424038410187,0.08396405726671219,-0.01839267648756504]]]],0,0,[],[],[]],[[[2,".bin",25296,1917970357,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12672,"length":12624,"count":3156,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12672,"count":528,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.03181007504463196,0.2047715187072754,-0.016705181449651718],"maxPosition",8,[1,0.050701167434453964,0.2256433516740799,-0.0018836059607565403]]]],0,0,[],[],[]],[[[2,".bin",9252,1861797462,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4656,"length":4596,"count":1149,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4656,"count":194,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.054746270179748535,0.0081440769135952,-0.019717400893568993],"maxPosition",8,[1,-0.03122503124177456,0.021258318796753883,0.00823903176933527]]]],0,0,[],[],[]],[[[2,".bin",4272,1877917962,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2160,"length":2112,"count":528,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2160,"count":90,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.03587571531534195,0.015171942301094532,-0.033322773873806],"maxPosition",8,[1,0.04903576523065567,0.05956206098198891,-0.024838794022798538]]]],0,0,[],[],[]],[[[2,".bin",20640,1031879805,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10176,"length":10464,"count":2616,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10176,"count":424,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.04028785228729248,0.018292682245373726,-0.034416504204273224],"maxPosition",8,[1,-0.029201317578554153,0.05035467818379402,-0.028988927602767944]]]],0,0,[],[],[]],[[[2,".bin",13440,3632254430,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7008,"length":6432,"count":1608,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7008,"count":292,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.017568888142704964,0.02148531563580036,-0.03311735764145851],"maxPosition",8,[1,0.03976617753505707,0.08856937289237976,0.0015499053988605738]]]],0,0,[],[],[]],[[[2,".bin",44160,660906895,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22416,"length":21744,"count":5436,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":22416,"count":934,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.030769633129239082,0.20531129837036133,-0.036357469856739044],"maxPosition",8,[1,0.030769633129239082,0.25466856360435486,0.0031246154103428125]]]],0,0,[],[],[]],[[[2,".bin",371400,1518571544,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":194160,"length":177240,"count":44310,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":194160,"count":8090,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.029572613537311554,0.203220933675766,-0.025920122861862183],"maxPosition",8,[1,0.029572613537311554,0.2499014139175415,0.01917557418346405]]]],0,0,[],[],[]],[[[2,".bin",21552,3726746807,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11568,"length":9984,"count":2496,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11568,"count":482,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.049518682062625885,0.13334360718727112,0.006619654130190611],"maxPosition",8,[1,0.0584820881485939,0.14936937391757965,0.015182309783995152]]]],0,0,[],[],[]],[[[2,".bin",73488,3313554940,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":38928,"length":34560,"count":8640,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":38928,"count":1622,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.013271864503622055,0.0029529205057770014,-0.033250682055950165],"maxPosition",8,[1,0.0546993762254715,0.09658131748437881,0.009397100657224655]]]],0,0,[],[],[]],[[[2,".bin",13104,3679741502,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6960,"length":6144,"count":1536,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6960,"count":290,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.05497261509299278,0.14972226321697235,0.010578423738479614],"maxPosition",8,[1,-0.04785521700978279,0.16046394407749176,0.023107407614588737]]]],0,0,[],[],[]],[[[2,".bin",219936,2521685663,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":110784,"length":109152,"count":27288,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":110784,"count":4616,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.03174011781811714,0.19080637395381927,-0.03638692572712898],"maxPosition",8,[1,0.03174011781811714,0.26617446541786194,0.022231200709939003]]]],0,0,[],[],[]],[[[2,".bin",312,4026277308,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":216,"length":96,"count":24,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":216,"count":9,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.0550667941570282,0.1478087157011032,0.0011704711942002177],"maxPosition",8,[1,-0.050850771367549896,0.15651820600032806,0.01104157418012619]]]],0,0,[],[],[]],[[[2,".bin",28128,469630487,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14352,"length":13776,"count":3444,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14352,"count":598,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.05442264676094055,0.00043815156095661223,-0.037298496812582016],"maxPosition",8,[1,-0.025822455063462257,0.020293915644288063,0.00921804178506136]]]],0,0,[],[],[]],[[[2,".bin",23088,1821539564,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11616,"length":11472,"count":2868,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11616,"count":484,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.03231023624539375,0.19001999497413635,-0.030502788722515106],"maxPosition",8,[1,0.052042558789253235,0.20378543436527252,-0.01550409197807312]]]],0,0,[],[],[]],[[[2,".bin",20640,1040599330,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10176,"length":10464,"count":2616,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10176,"count":424,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.034975383430719376,0.017869645729660988,-0.034201014786958694],"maxPosition",8,[1,-0.022534670308232307,0.04831488057971001,-0.02655806951224804]]]],0,0,[],[],[]],[[[2,".bin",2352,318124121,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":1008,"count":252,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":56,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.04822690039873123,0.15833282470703125,-0.0037429886870086193],"maxPosition",8,[1,0.05811621993780136,0.17090259492397308,0.007378425449132919]]]],0,0,[],[],[]],[[[2,".bin",32208,1372025131,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17952,"length":14256,"count":3564,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":17952,"count":748,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.03252921625971794,0.20734305679798126,-0.02384660579264164],"maxPosition",8,[1,-0.017711710184812546,0.24542930722236633,0.013148809783160686]]]],0,0,[],[],[]],[[[2,".bin",100980,210755057,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":52896,"length":48084,"count":12021,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":52896,"count":2204,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.027963215485215187,0.21729661524295807,-0.03627065569162369],"maxPosition",8,[1,-0.0062329526990652084,0.24156762659549713,-0.028545543551445007]]]],0,0,[],[],[]],[[[2,".bin",7008,1594642468,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3648,"length":3360,"count":840,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3648,"count":152,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.030892299488186836,0.23902863264083862,-0.028206029906868935],"maxPosition",8,[1,-0.01916510984301567,0.25717392563819885,-0.01687881536781788]]]],0,0,[],[],[]],[[[2,".bin",22992,2377281429,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11376,"length":11616,"count":2904,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11376,"count":474,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.048567578196525574,0.14638017117977142,-0.0016607512952759862],"maxPosition",8,[1,0.059580471366643906,0.16316640377044678,0.016000961884856224]]]],0,0,[],[],[]],[[[2,".bin",3024,2965841258,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1536,"length":1488,"count":372,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1536,"count":64,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.0193776935338974,0.011842300184071064,-0.03153218328952789],"maxPosition",8,[1,0.032451119273900986,0.05517764016985893,-0.02269938960671425]]]],0,0,[],[],[]],[[[8,"HD_Ironman:silver",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.17407764494419098},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929]]],11]]],0,0,[0],[3],[3]],[[[2,".bin",28128,2532334779,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14352,"length":13776,"count":3444,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14352,"count":598,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.026678021997213364,0.00034823454916477203,-0.03772483021020889],"maxPosition",8,[1,0.05527840927243233,0.020204193890094757,0.008793261833488941]]]],0,0,[],[],[]],[[[8,"Iron_man_leg:red",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.3036002218723297},"albedoScale",8,[1,0.4000000059604645,0.05079999193549156,0.05079999193549156]]],11]]],0,0,[0],[3],[3]],[[[2,".bin",10212,244838803,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5136,"length":5076,"count":1269,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5136,"count":214,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.030901407822966576,0.23936906456947327,-0.018490344285964966],"maxPosition",8,[1,-0.007915747351944447,0.2593691349029541,0.002386675914749503]]]],0,0,[],[],[]],[[[2,".bin",18672,2213375866,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9696,"length":8976,"count":2244,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9696,"count":404,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.04648204520344734,0.3001157343387604,-0.030396593734622],"maxPosition",8,[1,0.04650336131453514,0.38145172595977783,0.016235442832112312]]]],0,0,[],[],[]],[[[2,".bin",73488,1416848990,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":38928,"length":34560,"count":8640,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":38928,"count":1622,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.0538734570145607,0.002855639671906829,-0.03313286229968071],"maxPosition",8,[1,-0.01280270703136921,0.09647899121046066,0.009468413889408112]]]],0,0,[],[],[]],[[[2,".bin",72180,3796885615,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37800,"length":34380,"count":8595,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37800,"count":1575,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.021180683746933937,0.23366597294807434,-0.033419664949178696],"maxPosition",8,[1,-0.005925268400460482,0.260184109210968,-0.016216838732361794]]]],0,0,[],[],[]],[[[2,".bin",50568,91467814,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25656,"length":24912,"count":6228,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25656,"count":1069,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.05753524601459503,0.0002021194522967562,-0.009142077527940273],"maxPosition",8,[1,-0.03350764513015747,0.013070277869701385,0.01996002160012722]]]],0,0,[],[],[]],[[[2,".bin",60984,1694837200,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":30960,"length":30024,"count":7506,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":30960,"count":1290,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.026500707492232323,0.22580237686634064,-0.026692168787121773],"maxPosition",8,[1,0.05368160828948021,0.25123804807662964,0.0049508605152368546]]]],0,0,[],[],[]],[[[2,".bin",9252,3351698477,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4656,"length":4596,"count":1149,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4656,"count":194,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.032080598175525665,0.008054159581661224,-0.02014295570552349],"maxPosition",8,[1,0.05560164526104927,0.021168427541851997,0.007814251817762852]]]],0,0,[],[],[]],[[[2,".bin",29520,2523673233,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":15408,"length":14112,"count":3528,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":15408,"count":642,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.016044853255152702,0.225088968873024,-0.03429558128118515],"maxPosition",8,[1,0.029966387897729874,0.2523820698261261,-0.025096917524933815]]]],0,0,[],[],[]],[[[2,".bin",21336,463797531,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11352,"length":9984,"count":2496,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11352,"count":473,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.05712829530239105,0.13312162458896637,0.0028651352040469646],"maxPosition",8,[1,-0.04925087094306946,0.14875468611717224,0.010972828604280949]]]],0,0,[],[],[]],[[[2,".bin",6096,3176545917,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3504,"length":2592,"count":648,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3504,"count":146,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.10249493271112442,-0.10093780606985092,-0.004532996099442244],"maxPosition",8,[1,0.10249493271112442,0.10093781352043152,0]]]],0,0,[],[],[]],[[[54,"HD_Ironman:yellow",[{"metallic":0.4000000059604645,"roughness":0.17407764494419098}],[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}]]],0,0,[0],[3],[3]],[[[2,".bin",215484,112820852,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":109992,"length":105492,"count":26373,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":109992,"count":4583,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.048067606985569,0.011738818138837814,-0.03427775204181671],"maxPosition",8,[1,-0.013234850950539112,0.08331777900457382,-0.01627807691693306]]]],0,0,[],[],[]],[[[2,".bin",26856,2655702547,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14928,"length":11928,"count":2982,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14928,"count":622,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.01959996670484543,0.2336956262588501,-0.03543969616293907],"maxPosition",8,[1,-0.006222875788807869,0.2598531246185303,-0.01707492768764496]]]],0,0,[],[],[]],[[[2,".bin",312,1251654291,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":216,"length":96,"count":24,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":216,"count":9,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.05055195465683937,0.14771927893161774,0.001294979127123952],"maxPosition",8,[1,0.05437807738780975,0.15652382373809814,0.011084982194006443]]]],0,0,[],[],[]],[[[2,".bin",14688,2676200773,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7776,"length":6912,"count":1728,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7776,"count":324,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.028408149257302284,0.21690866351127625,-0.03644661232829094],"maxPosition",8,[1,-0.006070995703339577,0.24153448641300201,-0.028170373290777206]]]],0,0,[],[],[]],[[[8,"Iron_man_leg:gold",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.6007999777793884,0.4805924594402313,0.1351800113916397]]],11]]],0,0,[0],[3],[3]],[[[2,".bin",12192,1112891426,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6096,"length":6096,"count":1524,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6096,"count":254,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.03414171561598778,0.18421491980552673,-0.026693331077694893],"maxPosition",8,[1,0.05368238314986229,0.20192411541938782,-0.004286172334104776]]]],0,0,[],[],[]],[[[2,".bin",147120,3665201116,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":78768,"length":68352,"count":17088,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":78768,"count":3282,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.026009459048509598,0.1669619083404541,-0.0294741690158844],"maxPosition",8,[1,0.026032131165266037,0.21031777560710907,0.01936160959303379]]]],0,0,[],[],[]],[[[2,".bin",3312,3776896055,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1872,"length":1440,"count":360,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1872,"count":78,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.03468315303325653,0.18923050165176392,-0.021247539669275284],"maxPosition",8,[1,0.05180807784199715,0.2060554474592209,-0.007443344220519066]]]],0,0,[],[],[]],[[[8,"HD_Ironman:red",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.17407764494419098},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929]]],11]]],0,0,[0],[3],[3]],[[[2,".bin",22992,3637262435,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11376,"length":11616,"count":2904,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11376,"count":474,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.05949946865439415,0.14640554785728455,-0.0015570755349472165],"maxPosition",8,[1,-0.048513319343328476,0.16320331394672394,0.016240287572145462]]]],0,0,[],[],[]],[[[2,".bin",18720,2396635759,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9600,"length":9120,"count":2280,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9600,"count":400,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.02807638794183731,0.22228477895259857,-0.020428210496902466],"maxPosition",8,[1,0.032499760389328,0.24486786127090454,0.0020882445387542248]]]],0,0,[],[],[]],[[[2,".bin",12624,3427353119,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6336,"length":6288,"count":1572,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6336,"count":264,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.053013041615486145,0.23025573790073395,-0.02481088787317276],"maxPosition",8,[1,-0.026826463639736176,0.2497398853302002,0.0030215210281312466]]]],0,0,[],[],[]],[[[2,".bin",7968,852952492,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4320,"length":3648,"count":912,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4320,"count":180,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.011724187061190605,0.25118815898895264,-0.028395941480994225],"maxPosition",8,[1,0.016712546348571777,0.25528714060783386,-0.024506255984306335]]]],0,0,[],[],[]],[[[2,".bin",21024,2491703914,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10656,"length":10368,"count":2592,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10656,"count":444,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.03623848408460617,0.07737135142087936,-0.02561316452920437],"maxPosition",8,[1,-0.01298912987112999,0.11422520130872726,0.008202212862670422]]]],0,0,[],[],[]],[[[2,".bin",21552,4009192868,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11568,"length":9984,"count":2496,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11568,"count":482,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.04985858500003815,0.13693034648895264,-0.00007615813956363127],"maxPosition",8,[1,0.05577295273542404,0.14828479290008545,0.0053013963624835014]]]],0,0,[],[],[]],[[[8,"HD_Ironman:darksilver",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.17407764494419098},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929]]],11]]],0,0,[0],[3],[3]],[[[2,".bin",85656,2343088480,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":50976,"length":34680,"count":8670,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":50976,"count":2124,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.01940443553030491,0.23957587778568268,-0.02890211157500744],"maxPosition",8,[1,0.030738627538084984,0.2559659779071808,-0.01684083230793476]]]],0,0,[],[],[]],[[{"base":"2,2,0,0,0,1","mipmaps":[{"front":"a0+2ZhEUBPj4Oeiwtv4kNj","back":"feqxI7eodCyrwOMtVolPAO","left":"29c3iVhJBI8Ylg68w1X+VY","right":"c3rTVVi29EPJMUeM+yonCS","top":"6684h3Ev9NLLpQAIi2fdl3","bottom":"db+CNEfLVCMZpvYwtgax+G"}]}],[6],0,[],[],[]],[[{"fmt":"1","w":0,"h":0}],[1],0,[],[],[]]]]
